/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGFlexDirectionTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestFlexDirectionColumnNoHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 30, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 30, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestFlexDirectionRowNoWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 30, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 30, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 20, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestFlexDirectionRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionColumnReverse(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 80, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 70, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 80, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 70, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReverse(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseMarginLeft(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeLeft, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 100, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 100, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseMarginStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeStart, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 100, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseMarginRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeRight, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseMarginEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeEnd, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 100, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionColumnReverseMarginTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeTop, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 100, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 100, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())
}

func TestFlexDirectionColumnReverseMarginBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeBottom, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReversePaddingLeft(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeLeft, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 110, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 120, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReversePaddingStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeStart, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReversePaddingRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeRight, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, -20, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, -30, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReversePaddingEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeEnd, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, -20, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, -30, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 110, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 120, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionColumnReversePaddingTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeTop, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())
}

func TestFlexDirectionColumnReversePaddingBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeBottom, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseBorderLeft(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 110, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 120, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseBorderStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeStart, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseBorderRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeRight, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, -20, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, -30, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseBorderEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeEnd, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, -20, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, -30, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 110, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 120, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestFlexDirectionColumnReverseBorderTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeTop, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())
}

func TestFlexDirectionColumnReverseBorderBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeBottom, 100)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())
}

func TestFlexDirectionRowReversePosLeft(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetPosition(yoga.EdgeLeft, 100)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReversePosStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetPosition(yoga.EdgeStart, 100)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, -100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReversePosRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetPosition(yoga.EdgeRight, 100)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, -100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, -100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReversePosEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetPosition(yoga.EdgeEnd, 100)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, -100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionColumnReversePosTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root_child0.StyleSetPosition(yoga.EdgeTop, 100)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionColumnReversePosBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root_child0.StyleSetPosition(yoga.EdgeBottom, 100)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, -100, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, -100, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerPosLeft(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPosition(yoga.EdgeLeft, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerPosRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPosition(yoga.EdgeRight, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionColReverseInnerPosTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPosition(yoga.EdgeTop, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionColReverseInnerPosBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPosition(yoga.EdgeBottom, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerPosStart(t *testing.T) {
  t.Skip()

  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPosition(yoga.EdgeStart, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerPosEnd(t *testing.T) {
  t.Skip()

  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPosition(yoga.EdgeEnd, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerMarginLeft(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetMargin(yoga.EdgeLeft, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerMarginRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetMargin(yoga.EdgeRight, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionColReverseInnerMarginTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetMargin(yoga.EdgeTop, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionColReverseInnerMarginBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetMargin(yoga.EdgeBottom, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerMarignStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetMargin(yoga.EdgeStart, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerMarginEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetMargin(yoga.EdgeEnd, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerBorderLeft(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetBorder(yoga.EdgeLeft, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerBorderRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetBorder(yoga.EdgeRight, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionColReverseInnerBorderTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetBorder(yoga.EdgeTop, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionColReverseInnerBorderBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetBorder(yoga.EdgeBottom, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerBorderStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetBorder(yoga.EdgeLeft, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerBorderEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetBorder(yoga.EdgeRight, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerPaddingLeft(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPadding(yoga.EdgeLeft, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerPaddingRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPadding(yoga.EdgeRight, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionColReverseInnerPaddingTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPadding(yoga.EdgeTop, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionColReverseInnerPaddingBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionColumnReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPadding(yoga.EdgeBottom, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerPaddingStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPadding(yoga.EdgeStart, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}

func TestFlexDirectionRowReverseInnerPaddingEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRowReverse)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0_child0.StyleSetPadding(yoga.EdgeEnd, 10)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidth(10)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child2.LayoutHeight())
}
