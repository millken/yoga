/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGAbsolutePositionTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestAbsoluteLayoutWidthHeightStartTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPosition(yoga.EdgeStart, 10)
  root_child0.StyleSetPosition(yoga.EdgeTop, 10)
  root_child0.StyleSetWidth(10)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutWidthHeightEndBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPosition(yoga.EdgeEnd, 10)
  root_child0.StyleSetPosition(yoga.EdgeBottom, 10)
  root_child0.StyleSetWidth(10)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutStartTopEndBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPosition(yoga.EdgeStart, 10)
  root_child0.StyleSetPosition(yoga.EdgeTop, 10)
  root_child0.StyleSetPosition(yoga.EdgeEnd, 10)
  root_child0.StyleSetPosition(yoga.EdgeBottom, 10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 80, root_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 80, root_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutWidthHeightStartTopEndBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPosition(yoga.EdgeStart, 10)
  root_child0.StyleSetPosition(yoga.EdgeTop, 10)
  root_child0.StyleSetPosition(yoga.EdgeEnd, 10)
  root_child0.StyleSetPosition(yoga.EdgeBottom, 10)
  root_child0.StyleSetWidth(10)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestDoNotClampHeightOfAbsoluteNodeToHeightOfItsOverflowHiddenParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetOverflow(yoga.OverflowHidden)
  root.StyleSetWidth(50)
  root.StyleSetHeight(50)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPosition(yoga.EdgeStart, 0)
  root_child0.StyleSetPosition(yoga.EdgeTop, 0)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(100)
  root_child0_child0.StyleSetHeight(100)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 50, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 50, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, -50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())
}

func TestAbsoluteLayoutWithinBorder(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeLeft, 10)
  root.StyleSetMargin(yoga.EdgeTop, 10)
  root.StyleSetMargin(yoga.EdgeRight, 10)
  root.StyleSetMargin(yoga.EdgeBottom, 10)
  root.StyleSetPadding(yoga.EdgeLeft, 10)
  root.StyleSetPadding(yoga.EdgeTop, 10)
  root.StyleSetPadding(yoga.EdgeRight, 10)
  root.StyleSetPadding(yoga.EdgeBottom, 10)
  root.StyleSetBorder(yoga.EdgeLeft, 10)
  root.StyleSetBorder(yoga.EdgeTop, 10)
  root.StyleSetBorder(yoga.EdgeRight, 10)
  root.StyleSetBorder(yoga.EdgeBottom, 10)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPosition(yoga.EdgeLeft, 0)
  root_child0.StyleSetPosition(yoga.EdgeTop, 0)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child1.StyleSetPosition(yoga.EdgeRight, 0)
  root_child1.StyleSetPosition(yoga.EdgeBottom, 0)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child2.StyleSetPosition(yoga.EdgeLeft, 0)
  root_child2.StyleSetPosition(yoga.EdgeTop, 0)
  root_child2.StyleSetMargin(yoga.EdgeLeft, 10)
  root_child2.StyleSetMargin(yoga.EdgeTop, 10)
  root_child2.StyleSetMargin(yoga.EdgeRight, 10)
  root_child2.StyleSetMargin(yoga.EdgeBottom, 10)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child3.StyleSetPosition(yoga.EdgeRight, 0)
  root_child3.StyleSetPosition(yoga.EdgeBottom, 0)
  root_child3.StyleSetMargin(yoga.EdgeLeft, 10)
  root_child3.StyleSetMargin(yoga.EdgeTop, 10)
  root_child3.StyleSetMargin(yoga.EdgeRight, 10)
  root_child3.StyleSetMargin(yoga.EdgeBottom, 10)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(50)
  root.InsertChild(root_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 10, root.LayoutLeft())
  assert.EqualValues(t, 10, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 30, root_child3.LayoutLeft())
  assert.EqualValues(t, 30, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 10, root.LayoutLeft())
  assert.EqualValues(t, 10, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 30, root_child3.LayoutLeft())
  assert.EqualValues(t, 30, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexGrow(1)
  root.StyleSetWidth(110)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(40)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 25, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 25, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentFlexEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyFlexEnd)
  root.StyleSetAlignItems(yoga.AlignFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexGrow(1)
  root.StyleSetWidth(110)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(40)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutJustifyContentCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexGrow(1)
  root.StyleSetWidth(110)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(40)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutAlignItemsCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexGrow(1)
  root.StyleSetWidth(110)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(40)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 25, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 25, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutAlignItemsCenterOnChildOnly(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexGrow(1)
  root.StyleSetWidth(110)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetAlignSelf(yoga.AlignCenter)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(40)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 25, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 25, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentCenterAndTopPosition(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexGrow(1)
  root.StyleSetWidth(110)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPosition(yoga.EdgeTop, 10)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(40)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 25, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 25, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentCenterAndBottomPosition(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexGrow(1)
  root.StyleSetWidth(110)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPosition(yoga.EdgeBottom, 10)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(40)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 25, root_child0.LayoutLeft())
  assert.EqualValues(t, 50, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 25, root_child0.LayoutLeft())
  assert.EqualValues(t, 50, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentCenterAndLeftPosition(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexGrow(1)
  root.StyleSetWidth(110)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPosition(yoga.EdgeLeft, 5)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(40)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 5, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 5, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutAlignItemsAndJustifyContentCenterAndRightPosition(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexGrow(1)
  root.StyleSetWidth(110)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPosition(yoga.EdgeRight, 5)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(40)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 45, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 110, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 45, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())
}

func TestPositionRootWithRtlShouldPositionWithoutdirection(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPosition(yoga.EdgeLeft, 72)
  root.StyleSetWidth(52)
  root.StyleSetHeight(52)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 72, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 72, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())
}

func TestAbsoluteLayoutPercentageBottomBasedOnParentHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPositionPercent(yoga.EdgeTop, 50)
  root_child0.StyleSetWidth(10)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child1.StyleSetPositionPercent(yoga.EdgeBottom, 50)
  root_child1.StyleSetWidth(10)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child2.StyleSetPositionPercent(yoga.EdgeTop, 10)
  root_child2.StyleSetPositionPercent(yoga.EdgeBottom, 10)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 90, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 160, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child1.LayoutLeft())
  assert.EqualValues(t, 90, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 160, root_child2.LayoutHeight())
}

func TestAbsoluteLayoutInWrapReverseColumnContainer(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrapReverse)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutInWrapReverseRowContainer(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrapReverse)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutInWrapReverseColumnContainerFlexEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrapReverse)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetAlignSelf(yoga.AlignFlexEnd)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutInWrapReverseRowContainerFlexEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrapReverse)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetAlignSelf(yoga.AlignFlexEnd)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())
}

func TestPercentAbsolutePositionInfiniteHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(300)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(300)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child1.StyleSetPositionPercent(yoga.EdgeLeft, 20)
  root_child1.StyleSetPositionPercent(yoga.EdgeTop, 20)
  root_child1.StyleSetWidthPercent(20)
  root_child1.StyleSetHeightPercent(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 300, root.LayoutWidth())
  assert.EqualValues(t, 0, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 300, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 60, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 60, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 300, root.LayoutWidth())
  assert.EqualValues(t, 0, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 300, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 60, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 60, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())
}

func TestAbsoluteLayoutPercentageHeightBasedOnPaddedParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeTop, 10)
  root.StyleSetBorder(yoga.EdgeTop, 10)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeightPercent(50)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutPercentageHeightBasedOnPaddedParentAndAlignItemsCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPadding(yoga.EdgeTop, 20)
  root.StyleSetPadding(yoga.EdgeBottom, 20)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeightPercent(50)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 25, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 25, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutPaddingLeft(t *testing.T) {
  t.Skip()

  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeLeft, 100)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 150, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutPaddingRight(t *testing.T) {
  t.Skip()

  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeRight, 100)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutPaddingTop(t *testing.T) {
  t.Skip()

  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeTop, 100)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 150, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())
}

func TestAbsoluteLayoutPaddingBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeBottom, 100)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 150, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())
}
