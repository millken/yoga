/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGMinMaxDimensionTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestMaxWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMaxWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestMaxHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root_child0.StyleSetMaxHeight(50)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())
}

func TestMinHeight(t *testing.T) {
  t.Skip()

  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMinHeight(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 60, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 60, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child1.LayoutHeight())
}

func TestMinWidth(t *testing.T) {
  t.Skip()

  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMinWidth(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 60, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 40, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 40, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 40, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())
}

func TestJustifyContentMinMax(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetMinHeight(100)
  root.StyleSetMaxHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(60)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 40, root_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())
}

func TestAlignItemsMinMax(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMinWidth(100)
  root.StyleSetMaxWidth(200)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(60)
  root_child0.StyleSetHeight(60)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 20, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 20, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())
}

func TestJustifyContentOverflowMinMax(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMinHeight(100)
  root.StyleSetMaxHeight(110)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(50)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 50, root.LayoutWidth())
  assert.EqualValues(t, 110, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, -20, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 80, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 50, root.LayoutWidth())
  assert.EqualValues(t, 110, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, -20, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 80, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())
}

func TestFlexGrowToMin(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetMinHeight(100)
  root.StyleSetMaxHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexShrink(1)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestFlexGrowInAtMostContainer(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignFlexStart)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexBasis(0)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())
}

func TestFlexGrowChild(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasis(0)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())
}

func TestFlexGrowWithinConstrainedMinMaxColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMinHeight(100)
  root.StyleSetMaxHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 0, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 0, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestFlexGrowWithinMaxWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetMaxWidth(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())
}

func TestFlexGrowWithinConstrainedMaxWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetMaxWidth(300)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())
}

func TestFlexRootIgnored(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexGrow(1)
  root.StyleSetWidth(100)
  root.StyleSetMinHeight(100)
  root.StyleSetMaxHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasis(200)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(100)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 300, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 200, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 300, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 200, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())
}

func TestFlexGrowRootMinimized(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetMinHeight(100)
  root.StyleSetMaxHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMinHeight(100)
  root_child0.StyleSetMaxHeight(500)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexBasis(200)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetHeight(100)
  root_child0.InsertChild(root_child0_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 300, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 300, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 200, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 300, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 300, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 200, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())
}

func TestFlexGrowHeightMaximized(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMinHeight(100)
  root_child0.StyleSetMaxHeight(500)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexBasis(200)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetHeight(100)
  root_child0.InsertChild(root_child0_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 500, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 400, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 400, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 500, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 400, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 400, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())
}

func TestFlexGrowWithinConstrainedMinRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMinWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())
}

func TestFlexGrowWithinConstrainedMinColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMinHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 0, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 0, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestFlexGrowWithinConstrainedMaxRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetMaxWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexShrink(1)
  root_child0_child0.StyleSetFlexBasis(100)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(50)
  root_child0.InsertChild(root_child0_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child1.LayoutHeight())
}

func TestFlexGrowWithinConstrainedMaxColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetMaxHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexShrink(1)
  root_child0.StyleSetFlexBasis(100)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestChildMinMaxWidthFlexing(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(120)
  root.StyleSetHeight(50)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasis(0)
  root_child0.StyleSetMinWidth(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexBasisPercent(50)
  root_child1.StyleSetMaxWidth(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 120, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 100, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 120, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 20, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMinWidthOverridesWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(50)
  root.StyleSetMinWidth(100)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 0, root.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 0, root.LayoutHeight())
}

func TestMaxWidthOverridesWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetMaxWidth(100)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 0, root.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 0, root.LayoutHeight())
}

func TestMinHeightOverridesHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetHeight(50)
  root.StyleSetMinHeight(100)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())
}

func TestMaxHeightOverridesHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetHeight(200)
  root.StyleSetMaxHeight(100)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())
}

func TestMinMaxPercentNoWidthHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignFlexStart)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMinWidthPercent(10)
  root_child0.StyleSetMaxWidthPercent(10)
  root_child0.StyleSetMinHeightPercent(10)
  root_child0.StyleSetMaxHeightPercent(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}
