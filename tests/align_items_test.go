/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGAlignItemsTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestAlignItemsStretch(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestAlignItemsCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 45, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 45, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestAlignItemsFlexStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignFlexStart)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestAlignItemsFlexEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestAlignBaseline(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())
}

func TestAlignBaselineChild(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(50)
  root_child1_child0.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())
}

func TestAlignBaselineChildMultiline(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child1.StyleSetFlexWrap(yoga.WrapWrap)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(25)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(25)
  root_child1_child0.StyleSetHeight(20)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child1_child1 := yoga.NewNodeWithConfig(config)
  root_child1_child1.StyleSetWidth(25)
  root_child1_child1.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child1, 1)

  root_child1_child2 := yoga.NewNodeWithConfig(config)
  root_child1_child2.StyleSetWidth(25)
  root_child1_child2.StyleSetHeight(20)
  root_child1.InsertChild(root_child1_child2, 2)

  root_child1_child3 := yoga.NewNodeWithConfig(config)
  root_child1_child3.StyleSetWidth(25)
  root_child1_child3.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child1.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child2.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child2.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child3.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child3.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child1.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child1.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child2.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child3.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child3.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child3.LayoutHeight())
}

func TestAlignBaselineChildMultilineOverride(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child1.StyleSetFlexWrap(yoga.WrapWrap)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(25)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(25)
  root_child1_child0.StyleSetHeight(20)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child1_child1 := yoga.NewNodeWithConfig(config)
  root_child1_child1.StyleSetAlignSelf(yoga.AlignBaseline)
  root_child1_child1.StyleSetWidth(25)
  root_child1_child1.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child1, 1)

  root_child1_child2 := yoga.NewNodeWithConfig(config)
  root_child1_child2.StyleSetWidth(25)
  root_child1_child2.StyleSetHeight(20)
  root_child1.InsertChild(root_child1_child2, 2)

  root_child1_child3 := yoga.NewNodeWithConfig(config)
  root_child1_child3.StyleSetAlignSelf(yoga.AlignBaseline)
  root_child1_child3.StyleSetWidth(25)
  root_child1_child3.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child1.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child2.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child2.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child3.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child3.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child1.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child1.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child2.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child3.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child3.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child3.LayoutHeight())
}

func TestAlignBaselineChildMultilineNoOverrideOnSecondline(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child1.StyleSetFlexWrap(yoga.WrapWrap)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(25)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(25)
  root_child1_child0.StyleSetHeight(20)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child1_child1 := yoga.NewNodeWithConfig(config)
  root_child1_child1.StyleSetWidth(25)
  root_child1_child1.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child1, 1)

  root_child1_child2 := yoga.NewNodeWithConfig(config)
  root_child1_child2.StyleSetWidth(25)
  root_child1_child2.StyleSetHeight(20)
  root_child1.InsertChild(root_child1_child2, 2)

  root_child1_child3 := yoga.NewNodeWithConfig(config)
  root_child1_child3.StyleSetAlignSelf(yoga.AlignBaseline)
  root_child1_child3.StyleSetWidth(25)
  root_child1_child3.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child1.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child2.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child2.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child3.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child3.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child1.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child1.LayoutHeight())

  assert.EqualValues(t, 25, root_child1_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child2.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child3.LayoutLeft())
  assert.EqualValues(t, 20, root_child1_child3.LayoutTop())
  assert.EqualValues(t, 25, root_child1_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child3.LayoutHeight())
}

func TestAlignBaselineChildTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPosition(yoga.EdgeTop, 10)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(50)
  root_child1_child0.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())
}

func TestAlignBaselineChildTop2(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetPosition(yoga.EdgeTop, 5)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(50)
  root_child1_child0.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 45, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 45, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())
}

func TestAlignBaselineDoubleNestedChild(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(50)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(50)
  root_child1_child0.StyleSetHeight(15)
  root_child1.InsertChild(root_child1_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 5, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 15, root_child1_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 5, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 15, root_child1_child0.LayoutHeight())
}

func TestAlignBaselineColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())
}

func TestAlignBaselineChildMargin(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMargin(yoga.EdgeLeft, 5)
  root_child0.StyleSetMargin(yoga.EdgeTop, 5)
  root_child0.StyleSetMargin(yoga.EdgeRight, 5)
  root_child0.StyleSetMargin(yoga.EdgeBottom, 5)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetMargin(yoga.EdgeLeft, 1)
  root_child1_child0.StyleSetMargin(yoga.EdgeTop, 1)
  root_child1_child0.StyleSetMargin(yoga.EdgeRight, 1)
  root_child1_child0.StyleSetMargin(yoga.EdgeBottom, 1)
  root_child1_child0.StyleSetWidth(50)
  root_child1_child0.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 5, root_child0.LayoutLeft())
  assert.EqualValues(t, 5, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 60, root_child1.LayoutLeft())
  assert.EqualValues(t, 44, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 1, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 1, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 45, root_child0.LayoutLeft())
  assert.EqualValues(t, 5, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, -10, root_child1.LayoutLeft())
  assert.EqualValues(t, 44, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, -1, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 1, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())
}

func TestAlignBaselineChildPadding(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPadding(yoga.EdgeLeft, 5)
  root.StyleSetPadding(yoga.EdgeTop, 5)
  root.StyleSetPadding(yoga.EdgeRight, 5)
  root.StyleSetPadding(yoga.EdgeBottom, 5)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetPadding(yoga.EdgeLeft, 5)
  root_child1.StyleSetPadding(yoga.EdgeTop, 5)
  root_child1.StyleSetPadding(yoga.EdgeRight, 5)
  root_child1.StyleSetPadding(yoga.EdgeBottom, 5)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(50)
  root_child1_child0.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 5, root_child0.LayoutLeft())
  assert.EqualValues(t, 5, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 55, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 5, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 5, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 45, root_child0.LayoutLeft())
  assert.EqualValues(t, 5, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, -5, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, -5, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 5, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())
}

func TestAlignBaselineMultiline(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(50)
  root_child1_child0.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(20)
  root.InsertChild(root_child2, 2)

  root_child2_child0 := yoga.NewNodeWithConfig(config)
  root_child2_child0.StyleSetWidth(50)
  root_child2_child0.StyleSetHeight(10)
  root_child2.InsertChild(root_child2_child0, 0)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(50)
  root.InsertChild(root_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child2_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child2_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child2_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child2_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 60, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child2_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child2_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child2_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child2_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 60, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())
}

func TestAlignBaselineMultilineColumn(t *testing.T) {
  t.Skip()

  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(20)
  root_child1_child0.StyleSetHeight(20)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(40)
  root_child2.StyleSetHeight(70)
  root.InsertChild(root_child2, 2)

  root_child2_child0 := yoga.NewNodeWithConfig(config)
  root_child2_child0.StyleSetWidth(10)
  root_child2_child0.StyleSetHeight(10)
  root_child2.InsertChild(root_child2_child0, 0)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(20)
  root.InsertChild(root_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 40, root_child2.LayoutWidth())
  assert.EqualValues(t, 70, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child2_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child2_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child2_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child2_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 70, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 40, root_child2.LayoutWidth())
  assert.EqualValues(t, 70, root_child2.LayoutHeight())

  assert.EqualValues(t, 30, root_child2_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child2_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child2_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child2_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 70, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())
}

func TestAlignBaselineMultilineColumn2(t *testing.T) {
  t.Skip()

  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(20)
  root_child1_child0.StyleSetHeight(20)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(40)
  root_child2.StyleSetHeight(70)
  root.InsertChild(root_child2, 2)

  root_child2_child0 := yoga.NewNodeWithConfig(config)
  root_child2_child0.StyleSetWidth(10)
  root_child2_child0.StyleSetHeight(10)
  root_child2.InsertChild(root_child2_child0, 0)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(20)
  root.InsertChild(root_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 40, root_child2.LayoutWidth())
  assert.EqualValues(t, 70, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child2_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child2_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child2_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child2_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 70, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 40, root_child2.LayoutWidth())
  assert.EqualValues(t, 70, root_child2.LayoutHeight())

  assert.EqualValues(t, 30, root_child2_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child2_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child2_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child2_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 70, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())
}

func TestAlignBaselineMultilineRowAndColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignBaseline)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidth(50)
  root_child1_child0.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(20)
  root.InsertChild(root_child2, 2)

  root_child2_child0 := yoga.NewNodeWithConfig(config)
  root_child2_child0.StyleSetWidth(50)
  root_child2_child0.StyleSetHeight(10)
  root_child2.InsertChild(root_child2_child0, 0)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(20)
  root.InsertChild(root_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child2_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child2_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child2_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child2_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 90, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child2_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child2_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child2_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child2_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 90, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())
}

func TestAlignItemsCenterChildWithMarginBiggerThanParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(52)
  root.StyleSetHeight(52)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetAlignItems(yoga.AlignCenter)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetMargin(yoga.EdgeLeft, 10)
  root_child0_child0.StyleSetMargin(yoga.EdgeRight, 10)
  root_child0_child0.StyleSetWidth(52)
  root_child0_child0.StyleSetHeight(52)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 52, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 52, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 52, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 52, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 52, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 52, root_child0_child0.LayoutHeight())
}

func TestAlignItemsFlexEndChildWithMarginBiggerThanParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(52)
  root.StyleSetHeight(52)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetAlignItems(yoga.AlignFlexEnd)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetMargin(yoga.EdgeLeft, 10)
  root_child0_child0.StyleSetMargin(yoga.EdgeRight, 10)
  root_child0_child0.StyleSetWidth(52)
  root_child0_child0.StyleSetHeight(52)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 52, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 52, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 52, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 52, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 52, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 52, root_child0_child0.LayoutHeight())
}

func TestAlignItemsCenterChildWithoutMarginBiggerThanParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(52)
  root.StyleSetHeight(52)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetAlignItems(yoga.AlignCenter)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(72)
  root_child0_child0.StyleSetHeight(72)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0_child0.LayoutHeight())
}

func TestAlignItemsFlexEndChildWithoutMarginBiggerThanParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(52)
  root.StyleSetHeight(52)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetAlignItems(yoga.AlignFlexEnd)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(72)
  root_child0_child0.StyleSetHeight(72)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -10, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0_child0.LayoutHeight())
}

func TestAlignCenterShouldSizeBasedOnContent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeTop, 20)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetFlexShrink(1)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexShrink(1)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetWidth(20)
  root_child0_child0_child0.StyleSetHeight(20)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 20, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 40, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 20, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 40, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0_child0.LayoutHeight())
}

func TestAlignStretchShouldSizeBasedOnParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeTop, 20)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetFlexShrink(1)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexShrink(1)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetWidth(20)
  root_child0_child0_child0.StyleSetHeight(20)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 20, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 20, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 80, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0_child0.LayoutHeight())
}

func TestAlignFlexStartWithShrinkingChildren(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(500)
  root.StyleSetHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetAlignItems(yoga.AlignFlexStart)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexShrink(1)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0_child0.StyleSetFlexShrink(1)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 500, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutHeight())
}

func TestAlignFlexStartWithStretchingChildren(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(500)
  root.StyleSetHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexShrink(1)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0_child0.StyleSetFlexShrink(1)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutHeight())
}

func TestAlignFlexStartWithShrinkingChildrenWithStretch(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(500)
  root.StyleSetHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetAlignItems(yoga.AlignFlexStart)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexShrink(1)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0_child0.StyleSetFlexShrink(1)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 500, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutHeight())
}
