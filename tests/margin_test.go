/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGMarginTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestMarginStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMargin(yoga.EdgeStart, 10)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())
}

func TestMarginTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMargin(yoga.EdgeTop, 10)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestMarginEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifyFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMargin(yoga.EdgeEnd, 10)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())
}

func TestMarginBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMargin(yoga.EdgeBottom, 10)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestMarginAndFlexRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMargin(yoga.EdgeStart, 10)
  root_child0.StyleSetMargin(yoga.EdgeEnd, 10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 80, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 80, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())
}

func TestMarginAndFlexColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMargin(yoga.EdgeTop, 10)
  root_child0.StyleSetMargin(yoga.EdgeBottom, 10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0.LayoutHeight())
}

func TestMarginAndStretchRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMargin(yoga.EdgeTop, 10)
  root_child0.StyleSetMargin(yoga.EdgeBottom, 10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0.LayoutHeight())
}

func TestMarginAndStretchColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMargin(yoga.EdgeStart, 10)
  root_child0.StyleSetMargin(yoga.EdgeEnd, 10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 80, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 80, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())
}

func TestMarginWithSiblingRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMargin(yoga.EdgeEnd, 10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 45, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 55, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 45, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 55, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 45, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 45, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())
}

func TestMarginWithSiblingColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMargin(yoga.EdgeBottom, 10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 45, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 55, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 45, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 45, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 55, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 45, root_child1.LayoutHeight())
}

func TestMarginAutoBottom(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeBottom)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeTop)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 100, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoBottomAndTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeTop)
  root_child0.StyleSetMarginAuto(yoga.EdgeBottom)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 50, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 50, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoBottomAndTopJustifyCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeTop)
  root_child0.StyleSetMarginAuto(yoga.EdgeBottom)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 50, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 150, root_child0.LayoutLeft())
  assert.EqualValues(t, 50, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 150, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoMutipleChildrenColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeTop)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetMarginAuto(yoga.EdgeTop)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(50)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 25, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 75, root_child2.LayoutLeft())
  assert.EqualValues(t, 150, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 25, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 75, root_child2.LayoutLeft())
  assert.EqualValues(t, 150, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())
}

func TestMarginAutoMutipleChildrenRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeRight)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetMarginAuto(yoga.EdgeRight)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(50)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 75, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 75, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 150, root_child2.LayoutLeft())
  assert.EqualValues(t, 75, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 125, root_child0.LayoutLeft())
  assert.EqualValues(t, 75, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 75, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 75, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())
}

func TestMarginAutoLeftAndRightColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeLeft)
  root_child0.StyleSetMarginAuto(yoga.EdgeRight)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 75, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 150, root_child1.LayoutLeft())
  assert.EqualValues(t, 75, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 75, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 75, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoLeftAndRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeLeft)
  root_child0.StyleSetMarginAuto(yoga.EdgeRight)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 150, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoStartAndEndColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeStart)
  root_child0.StyleSetMarginAuto(yoga.EdgeEnd)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 75, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 150, root_child1.LayoutLeft())
  assert.EqualValues(t, 75, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 75, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 75, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoStartAndEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeStart)
  root_child0.StyleSetMarginAuto(yoga.EdgeEnd)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 150, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoLeftAndRightColumnAndCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeLeft)
  root_child0.StyleSetMarginAuto(yoga.EdgeRight)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoLeft(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeLeft)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 150, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 150, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeRight)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoLeftAndRightStretch(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeLeft)
  root_child0.StyleSetMarginAuto(yoga.EdgeRight)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 150, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoTopAndBottomStretch(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeTop)
  root_child0.StyleSetMarginAuto(yoga.EdgeBottom)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 50, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 150, root_child0.LayoutLeft())
  assert.EqualValues(t, 50, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 150, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginShouldNotBePartOfMaxHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(250)
  root.StyleSetHeight(250)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMargin(yoga.EdgeTop, 20)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root_child0.StyleSetMaxHeight(100)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 250, root.LayoutWidth())
  assert.EqualValues(t, 250, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 250, root.LayoutWidth())
  assert.EqualValues(t, 250, root.LayoutHeight())

  assert.EqualValues(t, 150, root_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())
}

func TestMarginShouldNotBePartOfMaxWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(250)
  root.StyleSetHeight(250)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMargin(yoga.EdgeLeft, 20)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetMaxWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 250, root.LayoutWidth())
  assert.EqualValues(t, 250, root.LayoutHeight())

  assert.EqualValues(t, 20, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 250, root.LayoutWidth())
  assert.EqualValues(t, 250, root.LayoutHeight())

  assert.EqualValues(t, 150, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())
}

func TestMarginAutoLeftRightChildBiggerThanParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(52)
  root.StyleSetHeight(52)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeLeft)
  root_child0.StyleSetMarginAuto(yoga.EdgeRight)
  root_child0.StyleSetWidth(72)
  root_child0.StyleSetHeight(72)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -20, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())
}

func TestMarginAutoLeftChildBiggerThanParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(52)
  root.StyleSetHeight(52)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeLeft)
  root_child0.StyleSetWidth(72)
  root_child0.StyleSetHeight(72)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -20, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())
}

func TestMarginFixLeftAutoRightChildBiggerThanParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(52)
  root.StyleSetHeight(52)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMargin(yoga.EdgeLeft, 10)
  root_child0.StyleSetMarginAuto(yoga.EdgeRight)
  root_child0.StyleSetWidth(72)
  root_child0.StyleSetHeight(72)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -20, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())
}

func TestMarginAutoLeftFixRightChildBiggerThanParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(52)
  root.StyleSetHeight(52)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMarginAuto(yoga.EdgeLeft)
  root_child0.StyleSetMargin(yoga.EdgeRight, 10)
  root_child0.StyleSetWidth(72)
  root_child0.StyleSetHeight(72)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 52, root.LayoutWidth())
  assert.EqualValues(t, 52, root.LayoutHeight())

  assert.EqualValues(t, -30, root_child0.LayoutLeft())
  assert.EqualValues(t, -10, root_child0.LayoutTop())
  assert.EqualValues(t, 72, root_child0.LayoutWidth())
  assert.EqualValues(t, 72, root_child0.LayoutHeight())
}

func TestMarginAutoTopStretchingChild(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexShrink(1)
  root_child0.StyleSetFlexBasisPercent(0)
  root_child0.StyleSetMarginAuto(yoga.EdgeTop)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 150, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 150, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestMarginAutoLeftStretchingChild(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexShrink(1)
  root_child0.StyleSetFlexBasisPercent(0)
  root_child0.StyleSetMarginAuto(yoga.EdgeLeft)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 200, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 150, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 200, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 150, root_child0.LayoutHeight())

  assert.EqualValues(t, 75, root_child1.LayoutLeft())
  assert.EqualValues(t, 150, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}
