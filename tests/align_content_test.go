/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGAlignContentTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestAlignContentFlexStartNowrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentFlexStartWrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(10)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root_child4.StyleSetHeight(10)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 10, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 20, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 10, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 40, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 90, root_child4.LayoutLeft())
  assert.EqualValues(t, 20, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())
}

func TestAlignContentFlexStartWrapSingleline(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentFlexStartWrappedNegativeSpace(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 20, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 40, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 20, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 40, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentFlexStartWrappedNegativeSpaceGap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root_child0.StyleSetGap(yoga.GutterColumn, 10);
  root_child0.StyleSetGap(yoga.GutterRow, 10);
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 60, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 60, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentFlexStartWithoutHeightOnChildren(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(10)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 10, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 20, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 0, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 10, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 20, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 0, root_child4.LayoutHeight())
}

func TestAlignContentFlexStartWithFlex(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasisPercent(0)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexBasisPercent(0)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetFlexGrow(1)
  root_child3.StyleSetFlexShrink(1)
  root_child3.StyleSetFlexBasisPercent(0)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 80, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 80, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 120, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 0, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child1.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 80, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 80, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 120, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 0, root_child4.LayoutHeight())
}

func TestAlignContentFlexEndNowrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentFlexEndWrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(10)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root_child4.StyleSetHeight(10)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 90, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 100, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 110, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 90, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 90, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 100, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 40, root_child3.LayoutLeft())
  assert.EqualValues(t, 100, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 90, root_child4.LayoutLeft())
  assert.EqualValues(t, 110, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())
}

func TestAlignContentFlexEndWrapSingleline(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 110, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 110, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 110, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 110, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentFlexEndWrappedNegativeSpace(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetAlignContent(yoga.AlignFlexEnd)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -50, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -30, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, -10, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -50, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -30, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, -10, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentFlexEndWrappedNegativeSpaceGap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetAlignContent(yoga.AlignFlexEnd)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root_child0.StyleSetGap(yoga.GutterColumn, 10);
  root_child0.StyleSetGap(yoga.GutterRow, 10);
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -70, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -40, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, -10, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -70, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -40, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, -10, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentCenterNowrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentCenterWrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(10)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root_child4.StyleSetHeight(10)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 45, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 45, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 55, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 55, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 65, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 45, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 45, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 55, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 40, root_child3.LayoutLeft())
  assert.EqualValues(t, 55, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 90, root_child4.LayoutLeft())
  assert.EqualValues(t, 65, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())
}

func TestAlignContentCenterWrapSingleline(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 55, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 55, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 55, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 55, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentCenterWrappedNegativeSpace(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetAlignContent(yoga.AlignCenter)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -25, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 15, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -25, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 15, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentCenterWrappedNegativeSpaceGap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetAlignContent(yoga.AlignCenter)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root_child0.StyleSetGap(yoga.GutterColumn, 10);
  root_child0.StyleSetGap(yoga.GutterRow, 10);
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -35, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 25, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -35, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 25, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentSpaceBetweenNowrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceBetween)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentSpaceBetweenWrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceBetween)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(10)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root_child4.StyleSetHeight(10)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 55, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 55, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 110, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 55, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 40, root_child3.LayoutLeft())
  assert.EqualValues(t, 55, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 90, root_child4.LayoutLeft())
  assert.EqualValues(t, 110, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())
}

func TestAlignContentSpaceBetweenWrapSingleline(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceBetween)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentSpaceBetweenWrappedNegativeSpace(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetAlignContent(yoga.AlignSpaceBetween)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 20, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 40, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 20, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 40, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentSpaceBetweenWrappedNegativeSpaceGap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetAlignContent(yoga.AlignSpaceBetween)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root_child0.StyleSetGap(yoga.GutterColumn, 10);
  root_child0.StyleSetGap(yoga.GutterRow, 10);
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 60, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 60, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentSpaceAroundNowrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceAround)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentSpaceAroundWrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceAround)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(10)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root_child4.StyleSetHeight(10)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 15, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 15, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 55, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 55, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 95, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 15, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 15, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 55, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 40, root_child3.LayoutLeft())
  assert.EqualValues(t, 55, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 90, root_child4.LayoutLeft())
  assert.EqualValues(t, 95, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())
}

func TestAlignContentSpaceAroundWrapSingleline(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceAround)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 55, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 55, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 55, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 55, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentSpaceAroundWrappedNegativeSpace(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetAlignContent(yoga.AlignSpaceAround)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -25, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 15, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -25, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 15, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentSpaceAroundWrappedNegativeSpaceGap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetAlignContent(yoga.AlignSpaceAround)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root_child0.StyleSetGap(yoga.GutterColumn, 10);
  root_child0.StyleSetGap(yoga.GutterRow, 10);
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -35, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 25, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -35, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 25, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentSpaceEvenlyNowrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceEvenly)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentSpaceEvenlyWrap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceEvenly)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root_child3.StyleSetHeight(10)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root_child4.StyleSetHeight(10)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 23, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 23, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 55, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 55, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 88, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 23, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 23, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 90, root_child2.LayoutLeft())
  assert.EqualValues(t, 55, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  assert.EqualValues(t, 40, root_child3.LayoutLeft())
  assert.EqualValues(t, 55, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 90, root_child4.LayoutLeft())
  assert.EqualValues(t, 88, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())
}

func TestAlignContentSpaceEvenlyWrapSingleline(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceEvenly)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(140)
  root.StyleSetHeight(120)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 55, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 55, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 140, root.LayoutWidth())
  assert.EqualValues(t, 120, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 55, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 55, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())
}

func TestAlignContentSpaceEvenlyWrappedNegativeSpace(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetAlignContent(yoga.AlignSpaceEvenly)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -25, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 15, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -25, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 15, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentSpaceEvenlyWrappedNegativeSpaceGap(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetBorder(yoga.EdgeLeft, 60)
  root.StyleSetBorder(yoga.EdgeTop, 60)
  root.StyleSetBorder(yoga.EdgeRight, 60)
  root.StyleSetBorder(yoga.EdgeBottom, 60)
  root.StyleSetWidth(320)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0.StyleSetAlignContent(yoga.AlignSpaceEvenly)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetHeight(10)
  root_child0.StyleSetGap(yoga.GutterColumn, 10);
  root_child0.StyleSetGap(yoga.GutterRow, 10);
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(80)
  root_child0_child0.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(80)
  root_child0_child1.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child2 := yoga.NewNodeWithConfig(config)
  root_child0_child2.StyleSetWidthPercent(80)
  root_child0_child2.StyleSetHeight(20)
  root_child0.InsertChild(root_child0_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -35, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 25, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 60, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -35, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, -5, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child2.LayoutLeft())
  assert.EqualValues(t, 25, root_child0_child2.LayoutTop())
  assert.EqualValues(t, 160, root_child0_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child0_child2.LayoutHeight())
}

func TestAlignContentStretch(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 0, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 0, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 100, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 100, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  assert.EqualValues(t, 100, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 0, root_child3.LayoutHeight())

  assert.EqualValues(t, 100, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 0, root_child4.LayoutHeight())
}

func TestAlignContentStretchRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 100, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 50, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 50, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 100, root_child3.LayoutLeft())
  assert.EqualValues(t, 50, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 50, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestAlignContentStretchRowWithChildren(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexShrink(1)
  root_child0_child0.StyleSetFlexBasisPercent(0)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 100, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 50, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 50, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 100, root_child3.LayoutLeft())
  assert.EqualValues(t, 50, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 50, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestAlignContentStretchRowWithFlex(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexShrink(1)
  root_child1.StyleSetFlexBasisPercent(0)
  root_child1.StyleSetWidth(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetFlexGrow(1)
  root_child3.StyleSetFlexShrink(1)
  root_child3.StyleSetFlexBasisPercent(0)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 0, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  assert.EqualValues(t, 100, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 0, root_child3.LayoutWidth())
  assert.EqualValues(t, 100, root_child3.LayoutHeight())

  assert.EqualValues(t, 100, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 100, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 100, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 0, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 0, root_child3.LayoutWidth())
  assert.EqualValues(t, 100, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 100, root_child4.LayoutHeight())
}

func TestAlignContentStretchRowWithFlexNoShrink(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexShrink(1)
  root_child1.StyleSetFlexBasisPercent(0)
  root_child1.StyleSetWidth(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetFlexGrow(1)
  root_child3.StyleSetFlexBasisPercent(0)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 0, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  assert.EqualValues(t, 100, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 0, root_child3.LayoutWidth())
  assert.EqualValues(t, 100, root_child3.LayoutHeight())

  assert.EqualValues(t, 100, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 100, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 100, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 0, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 0, root_child3.LayoutWidth())
  assert.EqualValues(t, 100, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 100, root_child4.LayoutHeight())
}

func TestAlignContentStretchRowWithMargin(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetMargin(yoga.EdgeLeft, 10)
  root_child1.StyleSetMargin(yoga.EdgeTop, 10)
  root_child1.StyleSetMargin(yoga.EdgeRight, 10)
  root_child1.StyleSetMargin(yoga.EdgeBottom, 10)
  root_child1.StyleSetWidth(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetMargin(yoga.EdgeLeft, 10)
  root_child3.StyleSetMargin(yoga.EdgeTop, 10)
  root_child3.StyleSetMargin(yoga.EdgeRight, 10)
  root_child3.StyleSetMargin(yoga.EdgeBottom, 10)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  assert.EqualValues(t, 60, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 40, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 40, root_child2.LayoutHeight())

  assert.EqualValues(t, 60, root_child3.LayoutLeft())
  assert.EqualValues(t, 50, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 80, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 100, root_child2.LayoutLeft())
  assert.EqualValues(t, 40, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 40, root_child2.LayoutHeight())

  assert.EqualValues(t, 40, root_child3.LayoutLeft())
  assert.EqualValues(t, 50, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 100, root_child4.LayoutLeft())
  assert.EqualValues(t, 80, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())
}

func TestAlignContentStretchRowWithPadding(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetPadding(yoga.EdgeLeft, 10)
  root_child1.StyleSetPadding(yoga.EdgeTop, 10)
  root_child1.StyleSetPadding(yoga.EdgeRight, 10)
  root_child1.StyleSetPadding(yoga.EdgeBottom, 10)
  root_child1.StyleSetWidth(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetPadding(yoga.EdgeLeft, 10)
  root_child3.StyleSetPadding(yoga.EdgeTop, 10)
  root_child3.StyleSetPadding(yoga.EdgeRight, 10)
  root_child3.StyleSetPadding(yoga.EdgeBottom, 10)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 100, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 50, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 50, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 100, root_child3.LayoutLeft())
  assert.EqualValues(t, 50, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 50, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestAlignContentStretchRowWithSingleRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())
}

func TestAlignContentStretchRowWithFixedHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetHeight(60)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 60, root_child1.LayoutHeight())

  assert.EqualValues(t, 100, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 80, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 80, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 80, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 60, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 80, root_child2.LayoutHeight())

  assert.EqualValues(t, 100, root_child3.LayoutLeft())
  assert.EqualValues(t, 80, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 80, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())
}

func TestAlignContentStretchRowWithMaxHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetMaxHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 100, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 50, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 50, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 100, root_child3.LayoutLeft())
  assert.EqualValues(t, 50, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 50, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestAlignContentStretchRowWithMinHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root_child1.StyleSetMinHeight(80)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 90, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 90, root_child1.LayoutHeight())

  assert.EqualValues(t, 100, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 90, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 90, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 90, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 90, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 90, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 90, root_child2.LayoutHeight())

  assert.EqualValues(t, 100, root_child3.LayoutLeft())
  assert.EqualValues(t, 90, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 10, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 90, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 10, root_child4.LayoutHeight())
}

func TestAlignContentStretchColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(150)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexShrink(1)
  root_child0_child0.StyleSetFlexBasisPercent(0)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexShrink(1)
  root_child1.StyleSetFlexBasisPercent(0)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(50)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetHeight(50)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetHeight(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 150, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 100, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 150, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 50, root_child2.LayoutWidth())
  assert.EqualValues(t, 50, root_child2.LayoutHeight())

  assert.EqualValues(t, 50, root_child3.LayoutLeft())
  assert.EqualValues(t, 100, root_child3.LayoutTop())
  assert.EqualValues(t, 50, root_child3.LayoutWidth())
  assert.EqualValues(t, 50, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 50, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestAlignContentStretchIsNotOverridingAlignItems(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetAlignContent(yoga.AlignStretch)
  root_child0.StyleSetAlignItems(yoga.AlignCenter)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(100)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetAlignContent(yoga.AlignStretch)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 45, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 45, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())
}
