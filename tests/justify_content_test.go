/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGJustifyContentTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestJustifyContentRowFlexStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 102, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 102, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 102, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 92, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 102, root_child0.LayoutHeight())

  assert.EqualValues(t, 82, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 102, root_child1.LayoutHeight())

  assert.EqualValues(t, 72, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 102, root_child2.LayoutHeight())
}

func TestJustifyContentRowFlexEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifyFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 72, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 102, root_child0.LayoutHeight())

  assert.EqualValues(t, 82, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 102, root_child1.LayoutHeight())

  assert.EqualValues(t, 92, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 102, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 20, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 102, root_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 102, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 102, root_child2.LayoutHeight())
}

func TestJustifyContentRowCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 36, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 102, root_child0.LayoutHeight())

  assert.EqualValues(t, 46, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 102, root_child1.LayoutHeight())

  assert.EqualValues(t, 56, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 102, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 56, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 102, root_child0.LayoutHeight())

  assert.EqualValues(t, 46, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 102, root_child1.LayoutHeight())

  assert.EqualValues(t, 36, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 102, root_child2.LayoutHeight())
}

func TestJustifyContentRowSpaceBetween(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifySpaceBetween)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 102, root_child0.LayoutHeight())

  assert.EqualValues(t, 46, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 102, root_child1.LayoutHeight())

  assert.EqualValues(t, 92, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 102, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 92, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 102, root_child0.LayoutHeight())

  assert.EqualValues(t, 46, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 102, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 102, root_child2.LayoutHeight())
}

func TestJustifyContentRowSpaceAround(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifySpaceAround)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 12, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 102, root_child0.LayoutHeight())

  assert.EqualValues(t, 46, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 102, root_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 102, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 102, root_child0.LayoutHeight())

  assert.EqualValues(t, 46, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 102, root_child1.LayoutHeight())

  assert.EqualValues(t, 12, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 102, root_child2.LayoutHeight())
}

func TestJustifyContentColumnFlexStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestJustifyContentColumnFlexEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 72, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 82, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 92, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 72, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 82, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 92, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestJustifyContentColumnCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 36, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 46, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 56, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 36, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 46, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 56, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestJustifyContentColumnSpaceBetween(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifySpaceBetween)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 46, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 92, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 46, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 92, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestJustifyContentColumnSpaceAround(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifySpaceAround)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 12, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 46, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 80, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 12, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 46, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 80, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestJustifyContentRowMinWidthAndMargin(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeLeft, 100)
  root.StyleSetMinWidth(50)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 100, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 50, root.LayoutWidth())
  assert.EqualValues(t, 20, root.LayoutHeight())

  assert.EqualValues(t, 15, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 100, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 50, root.LayoutWidth())
  assert.EqualValues(t, 20, root.LayoutHeight())

  assert.EqualValues(t, 15, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())
}

func TestJustifyContentRowMaxWidthAndMargin(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeLeft, 100)
  root.StyleSetWidth(100)
  root.StyleSetMaxWidth(80)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 100, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 20, root.LayoutHeight())

  assert.EqualValues(t, 30, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 100, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 20, root.LayoutHeight())

  assert.EqualValues(t, 30, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())
}

func TestJustifyContentColumnMinHeightAndMargin(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeTop, 100)
  root.StyleSetMinHeight(50)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 100, root.LayoutTop())
  assert.EqualValues(t, 20, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 15, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 100, root.LayoutTop())
  assert.EqualValues(t, 20, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 15, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())
}

func TestJustifyContentColunnMaxHeightAndMargin(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetMargin(yoga.EdgeTop, 100)
  root.StyleSetHeight(100)
  root.StyleSetMaxHeight(80)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 100, root.LayoutTop())
  assert.EqualValues(t, 20, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 100, root.LayoutTop())
  assert.EqualValues(t, 20, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())
}

func TestJustifyContentColumnSpaceEvenly(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifySpaceEvenly)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 18, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 46, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 74, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 18, root_child0.LayoutTop())
  assert.EqualValues(t, 102, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 46, root_child1.LayoutTop())
  assert.EqualValues(t, 102, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 74, root_child2.LayoutTop())
  assert.EqualValues(t, 102, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestJustifyContentRowSpaceEvenly(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifySpaceEvenly)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(102)
  root.StyleSetHeight(102)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 26, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 51, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 0, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 77, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 0, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 102, root.LayoutWidth())
  assert.EqualValues(t, 102, root.LayoutHeight())

  assert.EqualValues(t, 77, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 51, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 0, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 26, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 0, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestJustifyContentMinWidthWithPaddingChildWidthGreaterThanParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(1000)
  root.StyleSetHeight(1584)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetAlignContent(yoga.AlignStretch)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0_child0.StyleSetAlignContent(yoga.AlignStretch)
  root_child0_child0.StyleSetPadding(yoga.EdgeLeft, 100)
  root_child0_child0.StyleSetPadding(yoga.EdgeRight, 100)
  root_child0_child0.StyleSetMinWidth(400)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0_child0_child0.StyleSetAlignContent(yoga.AlignStretch)
  root_child0_child0_child0.StyleSetWidth(300)
  root_child0_child0_child0.StyleSetHeight(100)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 1000, root.LayoutWidth())
  assert.EqualValues(t, 1584, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 1000, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 100, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 300, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 1000, root.LayoutWidth())
  assert.EqualValues(t, 1584, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 1000, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 500, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 500, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 100, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 300, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0_child0.LayoutHeight())
}

func TestJustifyContentMinWidthWithPaddingChildWidthLowerThanParent(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(1080)
  root.StyleSetHeight(1584)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetAlignContent(yoga.AlignStretch)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0_child0.StyleSetAlignContent(yoga.AlignStretch)
  root_child0_child0.StyleSetPadding(yoga.EdgeLeft, 100)
  root_child0_child0.StyleSetPadding(yoga.EdgeRight, 100)
  root_child0_child0.StyleSetMinWidth(400)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0_child0_child0.StyleSetAlignContent(yoga.AlignStretch)
  root_child0_child0_child0.StyleSetWidth(199)
  root_child0_child0_child0.StyleSetHeight(100)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 1080, root.LayoutWidth())
  assert.EqualValues(t, 1584, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 1080, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 400, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 101, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 199, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 1080, root.LayoutWidth())
  assert.EqualValues(t, 1584, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 1080, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 680, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 400, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 101, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 199, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0_child0.LayoutHeight())
}

func TestJustifyContentSpaceBetweenIndefiniteContainerDimWithFreeSpace(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(300)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetJustifyContent(yoga.JustifySpaceBetween)
  root_child0.StyleSetMinWidth(200)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(50)
  root_child0_child0.StyleSetHeight(50)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(50)
  root_child0_child1.StyleSetHeight(50)
  root_child0.InsertChild(root_child0_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 300, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 150, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 300, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 150, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child1.LayoutHeight())
}
