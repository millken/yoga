/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGFlexWrapTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestWrapColumn(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(30)
  root_child0.StyleSetHeight(30)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(30)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(30)
  root_child3.StyleSetHeight(30)
  root.InsertChild(root_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 60, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 30, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 30, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 60, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 30, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 30, root_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 60, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 30, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 30, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 30, root_child1.LayoutHeight())

  assert.EqualValues(t, 30, root_child2.LayoutLeft())
  assert.EqualValues(t, 60, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 30, root_child3.LayoutHeight())
}

func TestWrapRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(30)
  root_child0.StyleSetHeight(30)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(30)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(30)
  root_child3.StyleSetHeight(30)
  root.InsertChild(root_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 60, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 30, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 30, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 30, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 30, root_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 60, root.LayoutHeight())

  assert.EqualValues(t, 70, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 30, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 30, root_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 70, root_child3.LayoutLeft())
  assert.EqualValues(t, 30, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 30, root_child3.LayoutHeight())
}

func TestWrapRowAlignItemsFlexEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(30)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(30)
  root_child3.StyleSetHeight(30)
  root.InsertChild(root_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 60, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 30, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 30, root_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 60, root.LayoutHeight())

  assert.EqualValues(t, 70, root_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 70, root_child3.LayoutLeft())
  assert.EqualValues(t, 30, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 30, root_child3.LayoutHeight())
}

func TestWrapRowAlignItemsCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(30)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(30)
  root_child3.StyleSetHeight(30)
  root.InsertChild(root_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 60, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 5, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 30, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 30, root_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 60, root.LayoutHeight())

  assert.EqualValues(t, 70, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 5, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 70, root_child3.LayoutLeft())
  assert.EqualValues(t, 30, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 30, root_child3.LayoutHeight())
}

func TestFlexWrapChildrenWithMinMainOverridingFlexBasis(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexBasis(50)
  root_child0.StyleSetMinWidth(55)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexBasis(50)
  root_child1.StyleSetMinWidth(55)
  root_child1.StyleSetHeight(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 55, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 55, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 45, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 55, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 45, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 55, root_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child1.LayoutHeight())
}

func TestFlexWrapWrapToChildHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetAlignItems(yoga.AlignFlexStart)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(100)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetWidth(100)
  root_child0_child0_child0.StyleSetHeight(100)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(100)
  root_child1.StyleSetHeight(100)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 100, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())
}

func TestFlexWrapAlignStretchFitsOneRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(150)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(50)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 150, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 100, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())
}

func TestWrapReverseRowAlignContentFlexStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrapReverse)
  root.StyleSetWidth(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(30)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(30)
  root_child3.StyleSetHeight(40)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(30)
  root_child4.StyleSetHeight(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 70, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 60, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 70, root_child0.LayoutLeft())
  assert.EqualValues(t, 70, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 60, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 70, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 40, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestWrapReverseRowAlignContentCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrapReverse)
  root.StyleSetWidth(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(30)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(30)
  root_child3.StyleSetHeight(40)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(30)
  root_child4.StyleSetHeight(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 70, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 60, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 70, root_child0.LayoutLeft())
  assert.EqualValues(t, 70, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 60, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 70, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 40, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestWrapReverseRowSingleLineDifferentSize(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrapReverse)
  root.StyleSetWidth(300)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(30)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(30)
  root_child3.StyleSetHeight(40)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(30)
  root_child4.StyleSetHeight(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 300, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 40, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 90, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 120, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 300, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 270, root_child0.LayoutLeft())
  assert.EqualValues(t, 40, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 240, root_child1.LayoutLeft())
  assert.EqualValues(t, 30, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 210, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 180, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 150, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestWrapReverseRowAlignContentStretch(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrapReverse)
  root.StyleSetWidth(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(30)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(30)
  root_child3.StyleSetHeight(40)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(30)
  root_child4.StyleSetHeight(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 70, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 60, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 70, root_child0.LayoutLeft())
  assert.EqualValues(t, 70, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 60, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 70, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 40, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestWrapReverseRowAlignContentSpaceAround(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceAround)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrapReverse)
  root.StyleSetWidth(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(30)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(30)
  root_child3.StyleSetHeight(40)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(30)
  root_child4.StyleSetHeight(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 70, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 60, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 70, root_child0.LayoutLeft())
  assert.EqualValues(t, 70, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 60, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 70, root_child3.LayoutLeft())
  assert.EqualValues(t, 10, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 40, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestWrapReverseColumnFixedSize(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrapReverse)
  root.StyleSetWidth(200)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(30)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(30)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(30)
  root_child3.StyleSetHeight(40)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(30)
  root_child4.StyleSetHeight(50)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 170, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 170, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 170, root_child2.LayoutLeft())
  assert.EqualValues(t, 30, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 170, root_child3.LayoutLeft())
  assert.EqualValues(t, 60, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 140, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 30, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 30, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 30, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 60, root_child3.LayoutTop())
  assert.EqualValues(t, 30, root_child3.LayoutWidth())
  assert.EqualValues(t, 40, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 30, root_child4.LayoutWidth())
  assert.EqualValues(t, 50, root_child4.LayoutHeight())
}

func TestWrappedRowWithinAlignItemsCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(150)
  root_child0_child0.StyleSetHeight(80)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(80)
  root_child0_child1.StyleSetHeight(80)
  root_child0.InsertChild(root_child0_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 160, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 150, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 80, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 80, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 160, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 150, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 120, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 80, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 80, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child1.LayoutHeight())
}

func TestWrappedRowWithinAlignItemsFlexStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignFlexStart)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(150)
  root_child0_child0.StyleSetHeight(80)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(80)
  root_child0_child1.StyleSetHeight(80)
  root_child0.InsertChild(root_child0_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 160, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 150, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 80, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 80, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 160, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 150, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 120, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 80, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 80, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child1.LayoutHeight())
}

func TestWrappedRowWithinAlignItemsFlexEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetAlignItems(yoga.AlignFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(150)
  root_child0_child0.StyleSetHeight(80)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidth(80)
  root_child0_child1.StyleSetHeight(80)
  root_child0.InsertChild(root_child0_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 160, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 150, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 80, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 80, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 160, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 150, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 120, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 80, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 80, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 80, root_child0_child1.LayoutHeight())
}

func TestWrappedColumnMaxHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignContent(yoga.AlignCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(700)
  root.StyleSetHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(500)
  root_child0.StyleSetMaxHeight(200)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetMargin(yoga.EdgeLeft, 20)
  root_child1.StyleSetMargin(yoga.EdgeTop, 20)
  root_child1.StyleSetMargin(yoga.EdgeRight, 20)
  root_child1.StyleSetMargin(yoga.EdgeBottom, 20)
  root_child1.StyleSetWidth(200)
  root_child1.StyleSetHeight(200)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(100)
  root_child2.StyleSetHeight(100)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 700, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 250, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0.LayoutHeight())

  assert.EqualValues(t, 200, root_child1.LayoutLeft())
  assert.EqualValues(t, 250, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 200, root_child1.LayoutHeight())

  assert.EqualValues(t, 420, root_child2.LayoutLeft())
  assert.EqualValues(t, 200, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 700, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 350, root_child0.LayoutLeft())
  assert.EqualValues(t, 30, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0.LayoutHeight())

  assert.EqualValues(t, 300, root_child1.LayoutLeft())
  assert.EqualValues(t, 250, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 200, root_child1.LayoutHeight())

  assert.EqualValues(t, 180, root_child2.LayoutLeft())
  assert.EqualValues(t, 200, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestWrappedColumnMaxHeightFlex(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignContent(yoga.AlignCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(700)
  root.StyleSetHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexShrink(1)
  root_child0.StyleSetFlexBasisPercent(0)
  root_child0.StyleSetWidth(100)
  root_child0.StyleSetHeight(500)
  root_child0.StyleSetMaxHeight(200)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexShrink(1)
  root_child1.StyleSetFlexBasisPercent(0)
  root_child1.StyleSetMargin(yoga.EdgeLeft, 20)
  root_child1.StyleSetMargin(yoga.EdgeTop, 20)
  root_child1.StyleSetMargin(yoga.EdgeRight, 20)
  root_child1.StyleSetMargin(yoga.EdgeBottom, 20)
  root_child1.StyleSetWidth(200)
  root_child1.StyleSetHeight(200)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(100)
  root_child2.StyleSetHeight(100)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 700, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 300, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 180, root_child0.LayoutHeight())

  assert.EqualValues(t, 250, root_child1.LayoutLeft())
  assert.EqualValues(t, 200, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 180, root_child1.LayoutHeight())

  assert.EqualValues(t, 300, root_child2.LayoutLeft())
  assert.EqualValues(t, 400, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 700, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 300, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 180, root_child0.LayoutHeight())

  assert.EqualValues(t, 250, root_child1.LayoutLeft())
  assert.EqualValues(t, 200, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 180, root_child1.LayoutHeight())

  assert.EqualValues(t, 300, root_child2.LayoutLeft())
  assert.EqualValues(t, 400, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestWrapNodesWithContentSizingOverflowingMargin(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(500)
  root.StyleSetHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetWidth(85)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetWidth(40)
  root_child0_child0_child0.StyleSetHeight(40)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetMargin(yoga.EdgeRight, 10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child1_child0.StyleSetWidth(40)
  root_child0_child1_child0.StyleSetHeight(40)
  root_child0_child1.InsertChild(root_child0_child1_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 85, root_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child1_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child1_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 415, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 85, root_child0.LayoutWidth())
  assert.EqualValues(t, 80, root_child0.LayoutHeight())

  assert.EqualValues(t, 45, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child0_child0.LayoutHeight())

  assert.EqualValues(t, 35, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child1_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child1_child0.LayoutHeight())
}

func TestWrapNodesWithContentSizingMarginCross(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(500)
  root.StyleSetHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetFlexWrap(yoga.WrapWrap)
  root_child0.StyleSetWidth(70)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetWidth(40)
  root_child0_child0_child0.StyleSetHeight(40)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetMargin(yoga.EdgeTop, 10)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child0_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child1_child0.StyleSetWidth(40)
  root_child0_child1_child0.StyleSetHeight(40)
  root_child0_child1.InsertChild(root_child0_child1_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 70, root_child0.LayoutWidth())
  assert.EqualValues(t, 90, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child1_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child1_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 430, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 70, root_child0.LayoutWidth())
  assert.EqualValues(t, 90, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child0_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1_child0.LayoutTop())
  assert.EqualValues(t, 40, root_child0_child1_child0.LayoutWidth())
  assert.EqualValues(t, 40, root_child0_child1_child0.LayoutHeight())
}
