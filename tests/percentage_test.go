/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGPercentageTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestPercentageWidthHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidthPercent(30)
  root_child0.StyleSetHeightPercent(30)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 140, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())
}

func TestPercentagePositionLeftTop(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(400)
  root.StyleSetHeight(400)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionPercent(yoga.EdgeLeft, 10)
  root_child0.StyleSetPositionPercent(yoga.EdgeTop, 20)
  root_child0.StyleSetWidthPercent(45)
  root_child0.StyleSetHeightPercent(55)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 400, root.LayoutWidth())
  assert.EqualValues(t, 400, root.LayoutHeight())

  assert.EqualValues(t, 40, root_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0.LayoutTop())
  assert.EqualValues(t, 180, root_child0.LayoutWidth())
  assert.EqualValues(t, 220, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 400, root.LayoutWidth())
  assert.EqualValues(t, 400, root.LayoutHeight())

  assert.EqualValues(t, 260, root_child0.LayoutLeft())
  assert.EqualValues(t, 80, root_child0.LayoutTop())
  assert.EqualValues(t, 180, root_child0.LayoutWidth())
  assert.EqualValues(t, 220, root_child0.LayoutHeight())
}

func TestPercentagePositionBottomRight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(500)
  root.StyleSetHeight(500)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionPercent(yoga.EdgeRight, 20)
  root_child0.StyleSetPositionPercent(yoga.EdgeBottom, 10)
  root_child0.StyleSetWidthPercent(55)
  root_child0.StyleSetHeightPercent(15)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, -100, root_child0.LayoutLeft())
  assert.EqualValues(t, -50, root_child0.LayoutTop())
  assert.EqualValues(t, 275, root_child0.LayoutWidth())
  assert.EqualValues(t, 75, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 500, root.LayoutWidth())
  assert.EqualValues(t, 500, root.LayoutHeight())

  assert.EqualValues(t, 125, root_child0.LayoutLeft())
  assert.EqualValues(t, -50, root_child0.LayoutTop())
  assert.EqualValues(t, 275, root_child0.LayoutWidth())
  assert.EqualValues(t, 75, root_child0.LayoutHeight())
}

func TestPercentageFlexBasis(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasisPercent(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexBasisPercent(25)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 125, root_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0.LayoutHeight())

  assert.EqualValues(t, 125, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 75, root_child1.LayoutWidth())
  assert.EqualValues(t, 200, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 125, root_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 75, root_child1.LayoutWidth())
  assert.EqualValues(t, 200, root_child1.LayoutHeight())
}

func TestPercentageFlexBasisCross(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasisPercent(50)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexBasisPercent(25)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 125, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 125, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 75, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 125, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 125, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 75, root_child1.LayoutHeight())
}

func TestPercentageFlexBasisCrossMinHeight(t *testing.T) {
  t.Skip()

  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMinHeightPercent(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(2)
  root_child1.StyleSetMinHeightPercent(10)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 120, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 120, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 80, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 120, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 120, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 80, root_child1.LayoutHeight())
}

func TestPercentageFlexBasisMainMaxHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasisPercent(10)
  root_child0.StyleSetMaxHeightPercent(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(4)
  root_child1.StyleSetFlexBasisPercent(10)
  root_child1.StyleSetMaxHeightPercent(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 52, root_child0.LayoutWidth())
  assert.EqualValues(t, 120, root_child0.LayoutHeight())

  assert.EqualValues(t, 52, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 148, root_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 148, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 52, root_child0.LayoutWidth())
  assert.EqualValues(t, 120, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 148, root_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child1.LayoutHeight())
}

func TestPercentageFlexBasisCrossMaxHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasisPercent(10)
  root_child0.StyleSetMaxHeightPercent(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(4)
  root_child1.StyleSetFlexBasisPercent(10)
  root_child1.StyleSetMaxHeightPercent(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 120, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 120, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 120, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 120, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 40, root_child1.LayoutHeight())
}

func TestPercentageFlexBasisMainMaxWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasisPercent(15)
  root_child0.StyleSetMaxWidthPercent(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(4)
  root_child1.StyleSetFlexBasisPercent(10)
  root_child1.StyleSetMaxWidthPercent(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 120, root_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0.LayoutHeight())

  assert.EqualValues(t, 120, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 40, root_child1.LayoutWidth())
  assert.EqualValues(t, 200, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 120, root_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 40, root_child1.LayoutWidth())
  assert.EqualValues(t, 200, root_child1.LayoutHeight())
}

func TestPercentageFlexBasisCrossMaxWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasisPercent(10)
  root_child0.StyleSetMaxWidthPercent(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(4)
  root_child1.StyleSetFlexBasisPercent(15)
  root_child1.StyleSetMaxWidthPercent(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 120, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 40, root_child1.LayoutWidth())
  assert.EqualValues(t, 150, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 120, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 160, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 40, root_child1.LayoutWidth())
  assert.EqualValues(t, 150, root_child1.LayoutHeight())
}

func TestPercentageFlexBasisMainMinWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasisPercent(15)
  root_child0.StyleSetMinWidthPercent(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(4)
  root_child1.StyleSetFlexBasisPercent(10)
  root_child1.StyleSetMinWidthPercent(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 120, root_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0.LayoutHeight())

  assert.EqualValues(t, 120, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 80, root_child1.LayoutWidth())
  assert.EqualValues(t, 200, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 120, root_child0.LayoutWidth())
  assert.EqualValues(t, 200, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 80, root_child1.LayoutWidth())
  assert.EqualValues(t, 200, root_child1.LayoutHeight())
}

func TestPercentageFlexBasisCrossMinWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasisPercent(10)
  root_child0.StyleSetMinWidthPercent(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(4)
  root_child1.StyleSetFlexBasisPercent(15)
  root_child1.StyleSetMinWidthPercent(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 150, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 50, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 150, root_child1.LayoutHeight())
}

func TestPercentageMultipleNestedWithPaddingMarginAndPercentageValues(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasisPercent(10)
  root_child0.StyleSetMargin(yoga.EdgeLeft, 5)
  root_child0.StyleSetMargin(yoga.EdgeTop, 5)
  root_child0.StyleSetMargin(yoga.EdgeRight, 5)
  root_child0.StyleSetMargin(yoga.EdgeBottom, 5)
  root_child0.StyleSetPadding(yoga.EdgeLeft, 3)
  root_child0.StyleSetPadding(yoga.EdgeTop, 3)
  root_child0.StyleSetPadding(yoga.EdgeRight, 3)
  root_child0.StyleSetPadding(yoga.EdgeBottom, 3)
  root_child0.StyleSetMinWidthPercent(60)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetMargin(yoga.EdgeLeft, 5)
  root_child0_child0.StyleSetMargin(yoga.EdgeTop, 5)
  root_child0_child0.StyleSetMargin(yoga.EdgeRight, 5)
  root_child0_child0.StyleSetMargin(yoga.EdgeBottom, 5)
  root_child0_child0.StyleSetPaddingPercent(yoga.EdgeLeft, 3)
  root_child0_child0.StyleSetPaddingPercent(yoga.EdgeTop, 3)
  root_child0_child0.StyleSetPaddingPercent(yoga.EdgeRight, 3)
  root_child0_child0.StyleSetPaddingPercent(yoga.EdgeBottom, 3)
  root_child0_child0.StyleSetWidthPercent(50)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetMarginPercent(yoga.EdgeLeft, 5)
  root_child0_child0_child0.StyleSetMarginPercent(yoga.EdgeTop, 5)
  root_child0_child0_child0.StyleSetMarginPercent(yoga.EdgeRight, 5)
  root_child0_child0_child0.StyleSetMarginPercent(yoga.EdgeBottom, 5)
  root_child0_child0_child0.StyleSetPadding(yoga.EdgeLeft, 3)
  root_child0_child0_child0.StyleSetPadding(yoga.EdgeTop, 3)
  root_child0_child0_child0.StyleSetPadding(yoga.EdgeRight, 3)
  root_child0_child0_child0.StyleSetPadding(yoga.EdgeBottom, 3)
  root_child0_child0_child0.StyleSetWidthPercent(45)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(4)
  root_child1.StyleSetFlexBasisPercent(15)
  root_child1.StyleSetMinWidthPercent(20)
  root.InsertChild(root_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 5, root_child0.LayoutLeft())
  assert.EqualValues(t, 5, root_child0.LayoutTop())
  assert.EqualValues(t, 190, root_child0.LayoutWidth())
  assert.EqualValues(t, 48, root_child0.LayoutHeight())

  assert.EqualValues(t, 8, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 8, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 92, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 25, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 10, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 36, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 6, root_child0_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 58, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 142, root_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 5, root_child0.LayoutLeft())
  assert.EqualValues(t, 5, root_child0.LayoutTop())
  assert.EqualValues(t, 190, root_child0.LayoutWidth())
  assert.EqualValues(t, 48, root_child0.LayoutHeight())

  assert.EqualValues(t, 90, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 8, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 92, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 25, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 46, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 36, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 6, root_child0_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 58, root_child1.LayoutTop())
  assert.EqualValues(t, 200, root_child1.LayoutWidth())
  assert.EqualValues(t, 142, root_child1.LayoutHeight())
}

func TestPercentageMarginShouldCalculateBasedOnlyOnWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMarginPercent(yoga.EdgeLeft, 10)
  root_child0.StyleSetMarginPercent(yoga.EdgeTop, 10)
  root_child0.StyleSetMarginPercent(yoga.EdgeRight, 10)
  root_child0.StyleSetMarginPercent(yoga.EdgeBottom, 10)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 20, root_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 20, root_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0.LayoutTop())
  assert.EqualValues(t, 160, root_child0.LayoutWidth())
  assert.EqualValues(t, 60, root_child0.LayoutHeight())

  assert.EqualValues(t, 150, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())
}

func TestPercentagePaddingShouldCalculateBasedOnlyOnWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetPaddingPercent(yoga.EdgeLeft, 10)
  root_child0.StyleSetPaddingPercent(yoga.EdgeTop, 10)
  root_child0.StyleSetPaddingPercent(yoga.EdgeRight, 10)
  root_child0.StyleSetPaddingPercent(yoga.EdgeBottom, 10)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidth(10)
  root_child0_child0.StyleSetHeight(10)
  root_child0.InsertChild(root_child0_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 200, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 170, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0_child0.LayoutHeight())
}

func TestPercentageAbsolutePosition(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPositionPercent(yoga.EdgeLeft, 30)
  root_child0.StyleSetPositionPercent(yoga.EdgeTop, 10)
  root_child0.StyleSetWidth(10)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())
}

func TestPercentageWidthHeightUndefinedParentSize(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidthPercent(50)
  root_child0.StyleSetHeightPercent(50)
  root.InsertChild(root_child0, 0)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 0, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 0, root.LayoutWidth())
  assert.EqualValues(t, 0, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 0, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())
}

func TestPercentWithinFlexGrow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(350)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(100)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetWidthPercent(100)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(100)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 350, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 100, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 150, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 150, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 250, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 350, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 250, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 100, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 150, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 150, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestPercentageContainerInWrappingContainer(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetAlignItems(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(200)
  root.StyleSetHeight(200)

  root_child0 := yoga.NewNodeWithConfig(config)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0_child0.StyleSetJustifyContent(yoga.JustifyCenter)
  root_child0_child0.StyleSetWidthPercent(100)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child0.StyleSetWidth(50)
  root_child0_child0_child0.StyleSetHeight(50)
  root_child0_child0.InsertChild(root_child0_child0_child0, 0)

  root_child0_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child0_child1.StyleSetWidth(50)
  root_child0_child0_child1.StyleSetHeight(50)
  root_child0_child0.InsertChild(root_child0_child0_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 75, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child0_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 200, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 75, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child0_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child0.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0_child1.LayoutTop())
  assert.EqualValues(t, 50, root_child0_child0_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0_child1.LayoutHeight())
}

func TestPercentAbsolutePosition(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(60)
  root.StyleSetHeight(50)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetPositionPercent(yoga.EdgeLeft, 50)
  root_child0.StyleSetWidthPercent(100)
  root_child0.StyleSetHeight(50)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetWidthPercent(100)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetWidthPercent(100)
  root_child0.InsertChild(root_child0_child1, 1)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 60, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 30, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 60, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 60, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child1.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 60, root.LayoutWidth())
  assert.EqualValues(t, 50, root.LayoutHeight())

  assert.EqualValues(t, 30, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, -60, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 60, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 50, root_child0_child1.LayoutHeight())
}
