/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGRoundingTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestRoundingFlexBasisFlexGrowRowWidthOf100(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 33, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 33, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 34, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 67, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 33, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 67, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 33, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 33, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 34, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 33, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestRoundingFlexBasisFlexGrowRowPrimeNumberWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(113)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetFlexGrow(1)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetFlexGrow(1)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 113, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 23, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 23, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 22, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 45, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 23, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  assert.EqualValues(t, 68, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 22, root_child3.LayoutWidth())
  assert.EqualValues(t, 100, root_child3.LayoutHeight())

  assert.EqualValues(t, 90, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 23, root_child4.LayoutWidth())
  assert.EqualValues(t, 100, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 113, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 90, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 23, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 68, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 22, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 45, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 23, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  assert.EqualValues(t, 23, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 22, root_child3.LayoutWidth())
  assert.EqualValues(t, 100, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 0, root_child4.LayoutTop())
  assert.EqualValues(t, 23, root_child4.LayoutWidth())
  assert.EqualValues(t, 100, root_child4.LayoutHeight())
}

func TestRoundingFlexBasisFlexShrinkRow(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(101)
  root.StyleSetHeight(100)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexShrink(1)
  root_child0.StyleSetFlexBasis(100)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexBasis(25)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexBasis(25)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 101, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 51, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 51, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 25, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 76, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 25, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 101, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 50, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 51, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 25, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 25, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 25, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestRoundingFlexBasisOverridesMainSize(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(113)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasis(50)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 113, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 64, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 64, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 24, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 113, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 64, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 64, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 24, root_child2.LayoutHeight())
}

func TestRoundingTotalFractial(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(87.4)
  root.StyleSetHeight(113.4)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(0.7)
  root_child0.StyleSetFlexBasis(50.3)
  root_child0.StyleSetHeight(20.3)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1.6)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1.1)
  root_child2.StyleSetHeight(10.7)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 87, root.LayoutWidth())
  assert.EqualValues(t, 113, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 87, root_child0.LayoutWidth())
  assert.EqualValues(t, 59, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 59, root_child1.LayoutTop())
  assert.EqualValues(t, 87, root_child1.LayoutWidth())
  assert.EqualValues(t, 30, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 87, root_child2.LayoutWidth())
  assert.EqualValues(t, 24, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 87, root.LayoutWidth())
  assert.EqualValues(t, 113, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 87, root_child0.LayoutWidth())
  assert.EqualValues(t, 59, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 59, root_child1.LayoutTop())
  assert.EqualValues(t, 87, root_child1.LayoutWidth())
  assert.EqualValues(t, 30, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 87, root_child2.LayoutWidth())
  assert.EqualValues(t, 24, root_child2.LayoutHeight())
}

func TestRoundingTotalFractialNested(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(87.4)
  root.StyleSetHeight(113.4)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(0.7)
  root_child0.StyleSetFlexBasis(50.3)
  root_child0.StyleSetHeight(20.3)
  root.InsertChild(root_child0, 0)

  root_child0_child0 := yoga.NewNodeWithConfig(config)
  root_child0_child0.StyleSetFlexGrow(1)
  root_child0_child0.StyleSetFlexBasis(0.3)
  root_child0_child0.StyleSetPosition(yoga.EdgeBottom, 13.3)
  root_child0_child0.StyleSetHeight(9.9)
  root_child0.InsertChild(root_child0_child0, 0)

  root_child0_child1 := yoga.NewNodeWithConfig(config)
  root_child0_child1.StyleSetFlexGrow(4)
  root_child0_child1.StyleSetFlexBasis(0.3)
  root_child0_child1.StyleSetPosition(yoga.EdgeTop, 13.3)
  root_child0_child1.StyleSetHeight(1.1)
  root_child0.InsertChild(root_child0_child1, 1)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1.6)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1.1)
  root_child2.StyleSetHeight(10.7)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 87, root.LayoutWidth())
  assert.EqualValues(t, 113, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 87, root_child0.LayoutWidth())
  assert.EqualValues(t, 59, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -13, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 87, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 12, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 25, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 87, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 47, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 59, root_child1.LayoutTop())
  assert.EqualValues(t, 87, root_child1.LayoutWidth())
  assert.EqualValues(t, 30, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 87, root_child2.LayoutWidth())
  assert.EqualValues(t, 24, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 87, root.LayoutWidth())
  assert.EqualValues(t, 113, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 87, root_child0.LayoutWidth())
  assert.EqualValues(t, 59, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child0.LayoutLeft())
  assert.EqualValues(t, -13, root_child0_child0.LayoutTop())
  assert.EqualValues(t, 87, root_child0_child0.LayoutWidth())
  assert.EqualValues(t, 12, root_child0_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child0_child1.LayoutLeft())
  assert.EqualValues(t, 25, root_child0_child1.LayoutTop())
  assert.EqualValues(t, 87, root_child0_child1.LayoutWidth())
  assert.EqualValues(t, 47, root_child0_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 59, root_child1.LayoutTop())
  assert.EqualValues(t, 87, root_child1.LayoutWidth())
  assert.EqualValues(t, 30, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 87, root_child2.LayoutWidth())
  assert.EqualValues(t, 24, root_child2.LayoutHeight())
}

func TestRoundingFractialInput1(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(113.4)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasis(50)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 113, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 64, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 64, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 24, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 113, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 64, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 64, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 24, root_child2.LayoutHeight())
}

func TestRoundingFractialInput2(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(113.6)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasis(50)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 114, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 65, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 65, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 24, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 25, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 114, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 65, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 65, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 24, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 25, root_child2.LayoutHeight())
}

func TestRoundingFractialInput3(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPosition(yoga.EdgeTop, 0.3)
  root.StyleSetWidth(100)
  root.StyleSetHeight(113.4)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasis(50)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 114, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 65, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 64, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 24, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 25, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 114, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 65, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 64, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 24, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 25, root_child2.LayoutHeight())
}

func TestRoundingFractialInput4(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetPosition(yoga.EdgeTop, 0.7)
  root.StyleSetWidth(100)
  root.StyleSetHeight(113.4)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexBasis(50)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 1, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 113, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 64, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 64, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 24, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 1, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 113, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 64, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 64, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 25, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 89, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 24, root_child2.LayoutHeight())
}

func TestRoundingInnerNodeControversyHorizontal(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetHeight(10)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetFlexGrow(1)
  root_child1_child0.StyleSetHeight(10)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetHeight(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 10, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 107, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 107, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 106, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 106, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 213, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 107, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 320, root.LayoutWidth())
  assert.EqualValues(t, 10, root.LayoutHeight())

  assert.EqualValues(t, 213, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 107, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 107, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 106, root_child1.LayoutWidth())
  assert.EqualValues(t, 10, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 106, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 107, root_child2.LayoutWidth())
  assert.EqualValues(t, 10, root_child2.LayoutHeight())
}

func TestRoundingInnerNodeControversyVertical(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetWidth(10)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetFlexGrow(1)
  root_child1_child0.StyleSetWidth(10)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetWidth(10)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 10, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 107, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 107, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 106, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 106, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 213, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 107, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 10, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 107, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 107, root_child1.LayoutTop())
  assert.EqualValues(t, 10, root_child1.LayoutWidth())
  assert.EqualValues(t, 106, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 106, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 213, root_child2.LayoutTop())
  assert.EqualValues(t, 10, root_child2.LayoutWidth())
  assert.EqualValues(t, 107, root_child2.LayoutHeight())
}

func TestRoundingInnerNodeControversyCombined(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(640)
  root.StyleSetHeight(320)

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetHeightPercent(100)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetHeightPercent(100)
  root.InsertChild(root_child1, 1)

  root_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child0.StyleSetFlexGrow(1)
  root_child1_child0.StyleSetWidthPercent(100)
  root_child1.InsertChild(root_child1_child0, 0)

  root_child1_child1 := yoga.NewNodeWithConfig(config)
  root_child1_child1.StyleSetFlexGrow(1)
  root_child1_child1.StyleSetWidthPercent(100)
  root_child1.InsertChild(root_child1_child1, 1)

  root_child1_child1_child0 := yoga.NewNodeWithConfig(config)
  root_child1_child1_child0.StyleSetFlexGrow(1)
  root_child1_child1_child0.StyleSetWidthPercent(100)
  root_child1_child1.InsertChild(root_child1_child1_child0, 0)

  root_child1_child2 := yoga.NewNodeWithConfig(config)
  root_child1_child2.StyleSetFlexGrow(1)
  root_child1_child2.StyleSetWidthPercent(100)
  root_child1.InsertChild(root_child1_child2, 2)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetHeightPercent(100)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 640, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 213, root_child0.LayoutWidth())
  assert.EqualValues(t, 320, root_child0.LayoutHeight())

  assert.EqualValues(t, 213, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 214, root_child1.LayoutWidth())
  assert.EqualValues(t, 320, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 214, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 107, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child1.LayoutLeft())
  assert.EqualValues(t, 107, root_child1_child1.LayoutTop())
  assert.EqualValues(t, 214, root_child1_child1.LayoutWidth())
  assert.EqualValues(t, 106, root_child1_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child1_child0.LayoutTop())
  assert.EqualValues(t, 214, root_child1_child1_child0.LayoutWidth())
  assert.EqualValues(t, 106, root_child1_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child2.LayoutLeft())
  assert.EqualValues(t, 213, root_child1_child2.LayoutTop())
  assert.EqualValues(t, 214, root_child1_child2.LayoutWidth())
  assert.EqualValues(t, 107, root_child1_child2.LayoutHeight())

  assert.EqualValues(t, 427, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 213, root_child2.LayoutWidth())
  assert.EqualValues(t, 320, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 640, root.LayoutWidth())
  assert.EqualValues(t, 320, root.LayoutHeight())

  assert.EqualValues(t, 427, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 213, root_child0.LayoutWidth())
  assert.EqualValues(t, 320, root_child0.LayoutHeight())

  assert.EqualValues(t, 213, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 214, root_child1.LayoutWidth())
  assert.EqualValues(t, 320, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child0.LayoutTop())
  assert.EqualValues(t, 214, root_child1_child0.LayoutWidth())
  assert.EqualValues(t, 107, root_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child1.LayoutLeft())
  assert.EqualValues(t, 107, root_child1_child1.LayoutTop())
  assert.EqualValues(t, 214, root_child1_child1.LayoutWidth())
  assert.EqualValues(t, 106, root_child1_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child1_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child1_child1_child0.LayoutTop())
  assert.EqualValues(t, 214, root_child1_child1_child0.LayoutWidth())
  assert.EqualValues(t, 106, root_child1_child1_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1_child2.LayoutLeft())
  assert.EqualValues(t, 213, root_child1_child2.LayoutTop())
  assert.EqualValues(t, 214, root_child1_child2.LayoutWidth())
  assert.EqualValues(t, 107, root_child1_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 213, root_child2.LayoutWidth())
  assert.EqualValues(t, 320, root_child2.LayoutHeight())
}
