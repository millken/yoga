/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by gentest/gentest.rb from gentest/fixtures/YGGapTest.html

package tests

import (
  "testing"
 "github.com/millken/yoga"
 "github.com/stretchr/testify/assert"
)
func TestColumnGapFlexible(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(80)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);
  root.StyleSetGap(yoga.GutterRow, 20);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexShrink(1)
  root_child0.StyleSetFlexBasisPercent(0)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexShrink(1)
  root_child1.StyleSetFlexBasisPercent(0)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetFlexShrink(1)
  root_child2.StyleSetFlexBasisPercent(0)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestColumnGapInflexible(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(80)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestColumnGapMixedFlexible(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(80)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexShrink(1)
  root_child1.StyleSetFlexBasisPercent(0)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestColumnGapChildMargins(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(80)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexShrink(1)
  root_child0.StyleSetFlexBasisPercent(0)
  root_child0.StyleSetMargin(yoga.EdgeLeft, 2)
  root_child0.StyleSetMargin(yoga.EdgeRight, 2)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexShrink(1)
  root_child1.StyleSetFlexBasisPercent(0)
  root_child1.StyleSetMargin(yoga.EdgeLeft, 10)
  root_child1.StyleSetMargin(yoga.EdgeRight, 10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetFlexShrink(1)
  root_child2.StyleSetFlexBasisPercent(0)
  root_child2.StyleSetMargin(yoga.EdgeLeft, 15)
  root_child2.StyleSetMargin(yoga.EdgeRight, 15)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 2, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 2, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 26, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 2, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 63, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 2, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 76, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 2, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 52, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 2, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 15, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 2, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestColumnRowGapWrapping(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(80)
  root.StyleSetGap(yoga.GutterColumn, 10);
  root.StyleSetGap(yoga.GutterRow, 20);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root_child2.StyleSetHeight(20)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(20)
  root_child3.StyleSetHeight(20)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(20)
  root_child4.StyleSetHeight(20)
  root.InsertChild(root_child4, 4)

  root_child5 := yoga.NewNodeWithConfig(config)
  root_child5.StyleSetWidth(20)
  root_child5.StyleSetHeight(20)
  root.InsertChild(root_child5, 5)

  root_child6 := yoga.NewNodeWithConfig(config)
  root_child6.StyleSetWidth(20)
  root_child6.StyleSetHeight(20)
  root.InsertChild(root_child6, 6)

  root_child7 := yoga.NewNodeWithConfig(config)
  root_child7.StyleSetWidth(20)
  root_child7.StyleSetHeight(20)
  root.InsertChild(root_child7, 7)

  root_child8 := yoga.NewNodeWithConfig(config)
  root_child8.StyleSetWidth(20)
  root_child8.StyleSetHeight(20)
  root.InsertChild(root_child8, 8)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 40, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 40, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 60, root_child5.LayoutLeft())
  assert.EqualValues(t, 40, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())

  assert.EqualValues(t, 0, root_child6.LayoutLeft())
  assert.EqualValues(t, 80, root_child6.LayoutTop())
  assert.EqualValues(t, 20, root_child6.LayoutWidth())
  assert.EqualValues(t, 20, root_child6.LayoutHeight())

  assert.EqualValues(t, 30, root_child7.LayoutLeft())
  assert.EqualValues(t, 80, root_child7.LayoutTop())
  assert.EqualValues(t, 20, root_child7.LayoutWidth())
  assert.EqualValues(t, 20, root_child7.LayoutHeight())

  assert.EqualValues(t, 60, root_child8.LayoutLeft())
  assert.EqualValues(t, 80, root_child8.LayoutTop())
  assert.EqualValues(t, 20, root_child8.LayoutWidth())
  assert.EqualValues(t, 20, root_child8.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 60, root_child3.LayoutLeft())
  assert.EqualValues(t, 40, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 40, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 0, root_child5.LayoutLeft())
  assert.EqualValues(t, 40, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())

  assert.EqualValues(t, 60, root_child6.LayoutLeft())
  assert.EqualValues(t, 80, root_child6.LayoutTop())
  assert.EqualValues(t, 20, root_child6.LayoutWidth())
  assert.EqualValues(t, 20, root_child6.LayoutHeight())

  assert.EqualValues(t, 30, root_child7.LayoutLeft())
  assert.EqualValues(t, 80, root_child7.LayoutTop())
  assert.EqualValues(t, 20, root_child7.LayoutWidth())
  assert.EqualValues(t, 20, root_child7.LayoutHeight())

  assert.EqualValues(t, 0, root_child8.LayoutLeft())
  assert.EqualValues(t, 80, root_child8.LayoutTop())
  assert.EqualValues(t, 20, root_child8.LayoutWidth())
  assert.EqualValues(t, 20, root_child8.LayoutHeight())
}

func TestColumnGapStartIndex(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(80)
  root.StyleSetGap(yoga.GutterColumn, 10);
  root.StyleSetGap(yoga.GutterRow, 20);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root_child2.StyleSetHeight(20)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(20)
  root_child3.StyleSetHeight(20)
  root.InsertChild(root_child3, 3)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 20, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 30, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 60, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 20, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 60, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 30, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())
}

func TestColumnGapJustifyFlexStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestColumnGapJustifyCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifyCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 10, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 70, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 70, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 10, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestColumnGapJustifyFlexEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifyFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 20, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 60, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestColumnGapJustifySpaceBetween(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifySpaceBetween)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 80, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestColumnGapJustifySpaceAround(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifySpaceAround)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 3, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 77, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 77, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 3, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestColumnGapJustifySpaceEvenly(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetJustifyContent(yoga.JustifySpaceEvenly)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 5, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 75, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 75, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 5, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestColumnGapWrapAlignFlexStart(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);
  root.StyleSetGap(yoga.GutterRow, 20);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root_child2.StyleSetHeight(20)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(20)
  root_child3.StyleSetHeight(20)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(20)
  root_child4.StyleSetHeight(20)
  root.InsertChild(root_child4, 4)

  root_child5 := yoga.NewNodeWithConfig(config)
  root_child5.StyleSetWidth(20)
  root_child5.StyleSetHeight(20)
  root.InsertChild(root_child5, 5)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 40, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 40, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 60, root_child5.LayoutLeft())
  assert.EqualValues(t, 40, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 80, root_child3.LayoutLeft())
  assert.EqualValues(t, 40, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 40, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 20, root_child5.LayoutLeft())
  assert.EqualValues(t, 40, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())
}

func TestColumnGapWrapAlignCenter(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignCenter)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);
  root.StyleSetGap(yoga.GutterRow, 20);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root_child2.StyleSetHeight(20)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(20)
  root_child3.StyleSetHeight(20)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(20)
  root_child4.StyleSetHeight(20)
  root.InsertChild(root_child4, 4)

  root_child5 := yoga.NewNodeWithConfig(config)
  root_child5.StyleSetWidth(20)
  root_child5.StyleSetHeight(20)
  root.InsertChild(root_child5, 5)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 20, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 60, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 60, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 60, root_child5.LayoutLeft())
  assert.EqualValues(t, 60, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 20, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 20, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 20, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 80, root_child3.LayoutLeft())
  assert.EqualValues(t, 60, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 60, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 20, root_child5.LayoutLeft())
  assert.EqualValues(t, 60, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())
}

func TestColumnGapWrapAlignFlexEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);
  root.StyleSetGap(yoga.GutterRow, 20);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root_child2.StyleSetHeight(20)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(20)
  root_child3.StyleSetHeight(20)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(20)
  root_child4.StyleSetHeight(20)
  root.InsertChild(root_child4, 4)

  root_child5 := yoga.NewNodeWithConfig(config)
  root_child5.StyleSetWidth(20)
  root_child5.StyleSetHeight(20)
  root.InsertChild(root_child5, 5)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 40, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 40, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 80, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 80, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 60, root_child5.LayoutLeft())
  assert.EqualValues(t, 80, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 40, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 40, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 40, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 80, root_child3.LayoutLeft())
  assert.EqualValues(t, 80, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 80, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 20, root_child5.LayoutLeft())
  assert.EqualValues(t, 80, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())
}

func TestColumnGapWrapAlignSpaceBetween(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceBetween)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);
  root.StyleSetGap(yoga.GutterRow, 20);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root_child2.StyleSetHeight(20)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(20)
  root_child3.StyleSetHeight(20)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(20)
  root_child4.StyleSetHeight(20)
  root.InsertChild(root_child4, 4)

  root_child5 := yoga.NewNodeWithConfig(config)
  root_child5.StyleSetWidth(20)
  root_child5.StyleSetHeight(20)
  root.InsertChild(root_child5, 5)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 80, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 80, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 60, root_child5.LayoutLeft())
  assert.EqualValues(t, 80, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 80, root_child3.LayoutLeft())
  assert.EqualValues(t, 80, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 80, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 20, root_child5.LayoutLeft())
  assert.EqualValues(t, 80, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())
}

func TestColumnGapWrapAlignSpaceAround(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignSpaceAround)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);
  root.StyleSetGap(yoga.GutterRow, 20);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root_child0.StyleSetHeight(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root_child2.StyleSetHeight(20)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(20)
  root_child3.StyleSetHeight(20)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(20)
  root_child4.StyleSetHeight(20)
  root.InsertChild(root_child4, 4)

  root_child5 := yoga.NewNodeWithConfig(config)
  root_child5.StyleSetWidth(20)
  root_child5.StyleSetHeight(20)
  root.InsertChild(root_child5, 5)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 10, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 70, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 70, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 60, root_child5.LayoutLeft())
  assert.EqualValues(t, 70, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 10, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 20, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 10, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 10, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 20, root_child2.LayoutHeight())

  assert.EqualValues(t, 80, root_child3.LayoutLeft())
  assert.EqualValues(t, 70, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 20, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 70, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 20, root_child4.LayoutHeight())

  assert.EqualValues(t, 20, root_child5.LayoutLeft())
  assert.EqualValues(t, 70, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 20, root_child5.LayoutHeight())
}

func TestColumnGapWrapAlignStretch(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(300)
  root.StyleSetHeight(300)
  root.StyleSetGap(yoga.GutterColumn, 5);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetMinWidth(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetMinWidth(60)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetMinWidth(60)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetFlexGrow(1)
  root_child3.StyleSetMinWidth(60)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetFlexGrow(1)
  root_child4.StyleSetMinWidth(60)
  root.InsertChild(root_child4, 4)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 300, root.LayoutWidth())
  assert.EqualValues(t, 300, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 71, root_child0.LayoutWidth())
  assert.EqualValues(t, 150, root_child0.LayoutHeight())

  assert.EqualValues(t, 76, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 72, root_child1.LayoutWidth())
  assert.EqualValues(t, 150, root_child1.LayoutHeight())

  assert.EqualValues(t, 153, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 71, root_child2.LayoutWidth())
  assert.EqualValues(t, 150, root_child2.LayoutHeight())

  assert.EqualValues(t, 229, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 71, root_child3.LayoutWidth())
  assert.EqualValues(t, 150, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 150, root_child4.LayoutTop())
  assert.EqualValues(t, 300, root_child4.LayoutWidth())
  assert.EqualValues(t, 150, root_child4.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 300, root.LayoutWidth())
  assert.EqualValues(t, 300, root.LayoutHeight())

  assert.EqualValues(t, 229, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 71, root_child0.LayoutWidth())
  assert.EqualValues(t, 150, root_child0.LayoutHeight())

  assert.EqualValues(t, 153, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 71, root_child1.LayoutWidth())
  assert.EqualValues(t, 150, root_child1.LayoutHeight())

  assert.EqualValues(t, 76, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 72, root_child2.LayoutWidth())
  assert.EqualValues(t, 150, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 0, root_child3.LayoutTop())
  assert.EqualValues(t, 71, root_child3.LayoutWidth())
  assert.EqualValues(t, 150, root_child3.LayoutHeight())

  assert.EqualValues(t, 0, root_child4.LayoutLeft())
  assert.EqualValues(t, 150, root_child4.LayoutTop())
  assert.EqualValues(t, 300, root_child4.LayoutWidth())
  assert.EqualValues(t, 150, root_child4.LayoutHeight())
}

func TestColumnGapDeterminesParentWidth(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetHeight(100)
  root.StyleSetGap(yoga.GutterColumn, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(30)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 20, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 50, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 80, root.LayoutWidth())
  assert.EqualValues(t, 100, root.LayoutHeight())

  assert.EqualValues(t, 70, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 10, root_child0.LayoutWidth())
  assert.EqualValues(t, 100, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 100, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 30, root_child2.LayoutWidth())
  assert.EqualValues(t, 100, root_child2.LayoutHeight())
}

func TestRowGapAlignItemsStretch(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignContent(yoga.AlignStretch)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(200)
  root.StyleSetGap(yoga.GutterColumn, 10);
  root.StyleSetGap(yoga.GutterRow, 20);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(20)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(20)
  root.InsertChild(root_child4, 4)

  root_child5 := yoga.NewNodeWithConfig(config)
  root_child5.StyleSetWidth(20)
  root.InsertChild(root_child5, 5)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 90, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 90, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 90, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 110, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 90, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 110, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 90, root_child4.LayoutHeight())

  assert.EqualValues(t, 60, root_child5.LayoutLeft())
  assert.EqualValues(t, 110, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 90, root_child5.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 90, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 90, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 90, root_child2.LayoutHeight())

  assert.EqualValues(t, 80, root_child3.LayoutLeft())
  assert.EqualValues(t, 110, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 90, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 110, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 90, root_child4.LayoutHeight())

  assert.EqualValues(t, 20, root_child5.LayoutLeft())
  assert.EqualValues(t, 110, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 90, root_child5.LayoutHeight())
}

func TestRowGapAlignItemsEnd(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetAlignItems(yoga.AlignFlexEnd)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(200)
  root.StyleSetGap(yoga.GutterColumn, 10);
  root.StyleSetGap(yoga.GutterRow, 20);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetWidth(20)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetWidth(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetWidth(20)
  root.InsertChild(root_child2, 2)

  root_child3 := yoga.NewNodeWithConfig(config)
  root_child3.StyleSetWidth(20)
  root.InsertChild(root_child3, 3)

  root_child4 := yoga.NewNodeWithConfig(config)
  root_child4.StyleSetWidth(20)
  root.InsertChild(root_child4, 4)

  root_child5 := yoga.NewNodeWithConfig(config)
  root_child5.StyleSetWidth(20)
  root.InsertChild(root_child5, 5)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 30, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 60, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  assert.EqualValues(t, 0, root_child3.LayoutLeft())
  assert.EqualValues(t, 20, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 0, root_child3.LayoutHeight())

  assert.EqualValues(t, 30, root_child4.LayoutLeft())
  assert.EqualValues(t, 20, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 0, root_child4.LayoutHeight())

  assert.EqualValues(t, 60, root_child5.LayoutLeft())
  assert.EqualValues(t, 20, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 0, root_child5.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 80, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 20, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 50, root_child1.LayoutLeft())
  assert.EqualValues(t, 0, root_child1.LayoutTop())
  assert.EqualValues(t, 20, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 20, root_child2.LayoutLeft())
  assert.EqualValues(t, 0, root_child2.LayoutTop())
  assert.EqualValues(t, 20, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  assert.EqualValues(t, 80, root_child3.LayoutLeft())
  assert.EqualValues(t, 20, root_child3.LayoutTop())
  assert.EqualValues(t, 20, root_child3.LayoutWidth())
  assert.EqualValues(t, 0, root_child3.LayoutHeight())

  assert.EqualValues(t, 50, root_child4.LayoutLeft())
  assert.EqualValues(t, 20, root_child4.LayoutTop())
  assert.EqualValues(t, 20, root_child4.LayoutWidth())
  assert.EqualValues(t, 0, root_child4.LayoutHeight())

  assert.EqualValues(t, 20, root_child5.LayoutLeft())
  assert.EqualValues(t, 20, root_child5.LayoutTop())
  assert.EqualValues(t, 20, root_child5.LayoutWidth())
  assert.EqualValues(t, 0, root_child5.LayoutHeight())
}

func TestRowGapColumnChildMargins(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetHeight(200)
  root.StyleSetGap(yoga.GutterRow, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetFlexGrow(1)
  root_child0.StyleSetFlexShrink(1)
  root_child0.StyleSetFlexBasisPercent(0)
  root_child0.StyleSetMargin(yoga.EdgeTop, 2)
  root_child0.StyleSetMargin(yoga.EdgeBottom, 2)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetFlexGrow(1)
  root_child1.StyleSetFlexShrink(1)
  root_child1.StyleSetFlexBasisPercent(0)
  root_child1.StyleSetMargin(yoga.EdgeTop, 10)
  root_child1.StyleSetMargin(yoga.EdgeBottom, 10)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetFlexGrow(1)
  root_child2.StyleSetFlexShrink(1)
  root_child2.StyleSetFlexBasisPercent(0)
  root_child2.StyleSetMargin(yoga.EdgeTop, 15)
  root_child2.StyleSetMargin(yoga.EdgeBottom, 15)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 2, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 42, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 66, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 42, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 143, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 42, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 2, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 42, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 66, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 42, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 143, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 42, root_child2.LayoutHeight())
}

func TestRowGapRowWrapChildMargins(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetFlexDirection(yoga.FlexDirectionRow)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetFlexWrap(yoga.WrapWrap)
  root.StyleSetWidth(100)
  root.StyleSetHeight(200)
  root.StyleSetGap(yoga.GutterRow, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetMargin(yoga.EdgeTop, 2)
  root_child0.StyleSetMargin(yoga.EdgeBottom, 2)
  root_child0.StyleSetWidth(60)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetMargin(yoga.EdgeTop, 10)
  root_child1.StyleSetMargin(yoga.EdgeBottom, 10)
  root_child1.StyleSetWidth(60)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetMargin(yoga.EdgeTop, 15)
  root_child2.StyleSetMargin(yoga.EdgeBottom, 15)
  root_child2.StyleSetWidth(60)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 2, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 24, root_child1.LayoutTop())
  assert.EqualValues(t, 60, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 59, root_child2.LayoutTop())
  assert.EqualValues(t, 60, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 200, root.LayoutHeight())

  assert.EqualValues(t, 40, root_child0.LayoutLeft())
  assert.EqualValues(t, 2, root_child0.LayoutTop())
  assert.EqualValues(t, 60, root_child0.LayoutWidth())
  assert.EqualValues(t, 0, root_child0.LayoutHeight())

  assert.EqualValues(t, 40, root_child1.LayoutLeft())
  assert.EqualValues(t, 24, root_child1.LayoutTop())
  assert.EqualValues(t, 60, root_child1.LayoutWidth())
  assert.EqualValues(t, 0, root_child1.LayoutHeight())

  assert.EqualValues(t, 40, root_child2.LayoutLeft())
  assert.EqualValues(t, 59, root_child2.LayoutTop())
  assert.EqualValues(t, 60, root_child2.LayoutWidth())
  assert.EqualValues(t, 0, root_child2.LayoutHeight())
}

func TestRowGapDeterminesParentHeight(t *testing.T) {
  config := yoga.ConfigNew()
  config.SetExperimentalFeatureEnabled(yoga.ExperimentalFeatureAbsolutePercentageAgainstPaddingEdge, true)

  root := yoga.NewNodeWithConfig(config)
  root.StyleSetPositionType(yoga.PositionTypeAbsolute)
  root.StyleSetWidth(100)
  root.StyleSetGap(yoga.GutterRow, 10);

  root_child0 := yoga.NewNodeWithConfig(config)
  root_child0.StyleSetHeight(10)
  root.InsertChild(root_child0, 0)

  root_child1 := yoga.NewNodeWithConfig(config)
  root_child1.StyleSetHeight(20)
  root.InsertChild(root_child1, 1)

  root_child2 := yoga.NewNodeWithConfig(config)
  root_child2.StyleSetHeight(30)
  root.InsertChild(root_child2, 2)
  root.StyleSetDirection(yoga.DirectionLTR)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionLTR)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 20, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())

  root.StyleSetDirection(yoga.DirectionRTL)
  yoga.CalculateLayout(root,yoga.Undefined, yoga.Undefined, yoga.DirectionRTL)

  assert.EqualValues(t, 0, root.LayoutLeft())
  assert.EqualValues(t, 0, root.LayoutTop())
  assert.EqualValues(t, 100, root.LayoutWidth())
  assert.EqualValues(t, 80, root.LayoutHeight())

  assert.EqualValues(t, 0, root_child0.LayoutLeft())
  assert.EqualValues(t, 0, root_child0.LayoutTop())
  assert.EqualValues(t, 100, root_child0.LayoutWidth())
  assert.EqualValues(t, 10, root_child0.LayoutHeight())

  assert.EqualValues(t, 0, root_child1.LayoutLeft())
  assert.EqualValues(t, 20, root_child1.LayoutTop())
  assert.EqualValues(t, 100, root_child1.LayoutWidth())
  assert.EqualValues(t, 20, root_child1.LayoutHeight())

  assert.EqualValues(t, 0, root_child2.LayoutLeft())
  assert.EqualValues(t, 50, root_child2.LayoutTop())
  assert.EqualValues(t, 100, root_child2.LayoutWidth())
  assert.EqualValues(t, 30, root_child2.LayoutHeight())
}
